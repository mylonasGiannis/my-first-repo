<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QBM.CompositionApi.Server</name>
    </assembly>
    <members>
        <member name="T:QBM.CompositionApi.AdminApi.ObservableEventStreamResponse">
            <summary>
            Response for an event stream.
            <remarks>When using this class, make sure close the stream when the server shuts down.</remarks>
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.AdminApi.ProjectsApi.MethodSetInfo.AppId">
            <summary>
            Identifier of the API project.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.AdminApi.ProjectsApi.MethodSetInfo.DisplayName">
            <summary>
            Display name of the API project.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.ApiConfigurableServices">
            <summary>
            Represents configurable services for the API. These services will be re-initialized when reinitializing the API.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.ApiServerServices">
            <summary>
            Provides server-level services to bootstrap an API server instance.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.AssemblyMethodSetProvider">
            <summary>
            Loads a method set provider from the specified assembly.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.BranchedMethodSets.HasApiErrors">
            <summary>
            If this flag is set, the API could be correctly initialized.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.Constants.ApiDllName">
            <summary>
            API assembly name
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.Constants.ApiDllPrefix">
            <summary>
            Assembly name prefix for API assemblies
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.Constants.ApiResourcesPrefix">
            <summary>
            Assembly name prefix for API resources
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.ContentTypeSelector">
            <summary>
            Selects a response builder depending on the type of content accepted by the client (the HTTP <c>Accept</c> header).
            </summary>
            <remarks>When the client does not specify an <c>Accept</c> header, the first response builder in the list will be used.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.DbMethodProvider.GetBranchedMethodSetsAsync(System.Boolean,System.Threading.CancellationToken)">
            <param name="includeInactive">Return all projects available for configuration purposes.</param>
            <param name="ct">Supports cancellation</param>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IApiEventService">
            <summary>
            Service providing API processing events.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IApiEventService.ProcessingRequest">
            <summary>
            Gets an event which is invoked whenever an request to any method is being processed.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IApiServerState.BeginRequest(System.Boolean@)">
            <summary>
            Notifies the server about a new request being processed.
            </summary>
            <returns>A disposable object that must be disposed when the request ends processing.</returns>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IApiServerState.PrepareForUnavailableStateAsync(System.Threading.CancellationToken)">
            <summary>
            Puts the server into the
            <see cref="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.PrepareUnavailable" /> state. Once all
            in-flight requests have been processed, the server enters the
            <see cref="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Unavailable" /> state.
            </summary>
            <remarks>Returns a Disposable that can be used to put the server back into
            the <see cref="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Running"></see> state.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Setup">
            <summary>
            The server is setting up and not yet processing requests.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Running">
            <summary>
            The server is processing requests normally.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.PrepareUnavailable">
            <summary>
            The server is still accepting new requests, and
            processing in-flight requests, but it will soon
            enter the <see cref="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Unavailable"></see> state.
            </summary>
            <remarks>The server enters this state as soon as
            the software update process may begin overwriting
            files.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.Unavailable">
            <summary>
            The server is not accepting new requests, and there are
            no in-flight requests.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IAsyncEvent`1">
            <summary>
            Represents an asynchronous event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IAsyncEvent`1.Subscribe(QBM.CompositionApi.ApiManager.IAsyncListener{`0})">
            <summary>
            Adds an asynchronous event listener.
            </summary>
            <param name="listener"></param>
            <returns>A disposable object. Disposing will unregister the event handler.</returns>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.AsyncEvent`1.Subscribe(QBM.CompositionApi.ApiManager.IAsyncListener{`0})">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.AsyncListener`1.InvokeAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IBranchedMethodSetsProvider.RecalculateRoutesAsync(System.Threading.CancellationToken)">
            <summary>
            Recalculates the routing table.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IExceptionService.GetExceptions(System.Exception)">
            <summary>
            Returns all relevant exceptions in the chain for the given exception.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IExceptionService.ToExceptionData(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns serializable exception data for the given exceptions.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IExceptionService.Filter">
            <summary>
            Sets a filter for exceptions that should be exposed to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IExceptionService.LogFilter">
            <summary>
            Sets a filter for exceptions that should be logged.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IExceptionService.GetExceptionConfig(System.Exception)">
            <summary>
            Returns the HTTP configuration to apply for this exception.
            </summary>
            <returns>This method is used to configure specific status codes or response content depending on the
            exception.</returns>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.ExceptionHttpConfiguration.Response">
            <summary>
            Gets or sets the response to send to the client.
            </summary>
            <remarks>If this property is set, the other properties are ignored.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IHttpHeaderConfig.Headers">
            <summary>
            Defines the HTTP headers which are appended to all responses.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IHttpHeaderConfig.ApiHeaders">
            <summary>
            Defines the HTTP headers which are appended to API responses.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IMethodRoute">
            <summary>
            Represents a specific route for a method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodRoute.Url">
            <summary>
            Returns the URL for this route.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodRoute.Method">
            <summary>
            Returns the base method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodRoute.ClientSuffix">
            <summary>
            Sets a client suffix for this route, in case it differs from other route only
            by the use of parameters.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodRoute.HttpMethods">
            <summary>
            Returns the dictionary of declared HTTP methods for this route.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodRoute.SortOrder">
            <summary>
            Gets or sets the priority for this route. By default, the method's
            sort order is used. Routes with a lower sort order are tried first.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.Description">
            <summary>
            Gets or sets a descriptive text for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.Module">
            <summary>
            Gets the declaring module for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.ClientSuffix">
            <summary>
            Sets a client suffix for this method, in case it differs from other methods only
            by the use of parameters.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.AllowUnauthenticated">
            <summary>
            Gets or sets a value indicating whether this method can
            be called without first authenticating the session.
            </summary>
            <remarks>If this flag is <c>true</c>, the service connection
            will be used to handle the request.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.Parameters">
            <summary>
            Returns the list of parameters for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.Validators">
            <summary>
            Returns the list of validators for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.ProcessingRequest">
            <summary>
            Raised when a request is processed for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.Disabled">
            <summary>
            Gets or sets a flag indicating whether this method is disabled.
            </summary>
            <remarks><para>Disabled methods are ignored in the data model and when
            running the API server.</para><para>Note that you cannot re-use a
            URL by disabling a method.</para></remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IMethodSettings.SortOrder">
            <summary>
            Gets or sets the priority for this method. Methods with a lower sort
            order are tried first.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IMethodValidation.ValidateAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            Validates the method for the given validation context. This method will be called
            once for each method set that the method is a part of.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.SystemInfo.PreProps">
            <summary>
            Returns the list of active preprocessor definitions.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.PingResult.NoDbConnection">
            <summary>
            Returns a flag indicating if the API could not be correctly initialized.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.PingResult.IsWaitingToStartUpdate">
            <inheritdoc cref="P:QBM.CompositionApi.PlugIns.IUpdateHandler.IsWaitingToStartUpdate"/>
        </member>
        <member name="E:QBM.CompositionApi.ApiManager.IOwinRequestScopeContext.Completed">
            <summary>
            Event raised when the Owin pipeline completes.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IOwinRequestScopeContext.Context">
            <summary>
            Returns the Owin context.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IPlugInMethodSetProvider.Build(VI.Base.IResolve)">
            <summary>
            Returns an additional method set to include in the build.
            </summary>
            <remarks>The return value may be null.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IRequestValidator">
            <summary>
            Interface for request validators.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRequestValidator.Name">
            <summary>
            Returns a name that identifies this validator.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IRequestValidator.ValidateAsync(QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Calls the validation function and returns a validation error, or <c>null</c> if validation succeeded.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IResponseBuilder">
            <summary>
            Builds an HTTP response with a given content type.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IResponseBuilder.ContentType">
            <summary>
            Returns the MIME content type that this builder generates.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IResponseBuilderSelector">
            <summary>
            A response builder selector selects the response builder to use for a given request.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.IResponseBuilderSelector.Select(QBM.CompositionApi.Handling.IRequest)">
            <summary>
            Selects a response builder to handle the given request.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IRouteActivator">
            <summary>
            Interface for classes that manage the active routes.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteActivator.CurrentRoutes">
            <summary>
            Returns the currently active routes.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.InputType">
            <summary>
            Gets the expected type of data sent by the client.
            </summary>
            <remarks>This type is used to declare the expected input schema.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.DeserializationInputType">
            <summary>
            Gets or sets the type used for deserialization of the input data sent by the client.
            If none is specified, the value of <see cref="P:QBM.CompositionApi.ApiManager.IRouteVerb.InputType"/> is used.
            </summary>
            <remarks>For example, the declared input type can be a dynamically built type; but we might use
            a simple dictionary to process the input.
            You can use <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> as a sentinel value to skip deserialization of the
            data.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.EndpointSecurityIdentifiers">
            <summary>
            Returns the endpoint security identifiers which manage the permission
            to call this route verb.
            If this is <c>null</c>, this endpoint defines its own security identifier.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.ResultType">
            <summary>
            Gets the dictionary of output types, depending on the status code.
            </summary>
            <remarks>The type of data for the <see cref="F:System.Net.HttpStatusCode.InternalServerError"/> code is an array of
            <see cref="T:QBM.CompositionApi.Dto.ExceptionData"/> objects.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.DefaultResultType">
            <summary>
            Gets the result type for successfully processed requests.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.Description">
            <summary>
            Gets or sets a descriptive text for this operation. If this is <c>null</c>, use the method-level
            method description instead (<see cref="P:QBM.CompositionApi.ApiManager.IMethodSettings.Description"/>).
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.ResponseBuilderSelector">
            <summary>
            Gets or sets the response builder selector.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.ClientProperties">
            <summary>
            Returns an object providing information about known keys for objects. This property may be <c>null</c>.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.FkCandidateRoutes">
            <summary>
            Returns known relations to other routes providing foreign-key candidate objects.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.IRouteVerb.UseMethodParameters">
            <summary>
            Gets or sets a flag indicating whether the query parameters defined on the method
            are applied to this route.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.IWorkflowAuthenticationService">
            <summary>
            Interface to store and query the status of a workflow authentication, identified by a key.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.WorkflowAuthenticationService.IsAuthenticatedAsync(QBM.CompositionApi.Handling.IRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a flag indicating whether the client has completed workflow authentication.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.JsonResponseBuilder">
            <summary>
            Response builder that serializes an object to JSON format.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.ApiManager.JsonResponseBuilder.Formatter">
            <summary>
            Returns the formatter that is used to build JSON-formatted results.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.JsonResponseBuilder.ContentTypeMatcher">
            <summary>
            Gets or sets a custom function that determines if the specified content type
            matches this response builder. By default, only the <see cref="P:QBM.CompositionApi.ApiManager.JsonResponseBuilder.ContentType"/>
            is matched.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.LogExtensions.LogException(NLog.Logger,System.Exception,NLog.LogLevel)">
            <summary>
            Log an exception including information about assembly loading failures.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.LoginMethod.AuthenticationPerModule">
            <summary>
            Defines specific login methods for each active authentication module, with
            authentication properties exposed as input parameters.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRoute.RouteParameters">
            <summary>
            Returns the collection of parameters that are specific to this route.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.MethodRouteVerb">
            <summary>
            Represents a specific HTTP verb for a route.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRouteVerb.InputType">
            <summary>
            Gets or sets the expected type of data sent by the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRouteVerb.ResultType">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRouteVerb.DefaultResultType">
            <summary>
            Gets or sets the result type for successfully processed requests.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRouteVerb.ResponseBuilderSelector">
            <summary>
            Gets the response builder selector.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.MethodRouteVerb.ClientProperties">
            <summary>
            Returns an object providing information about known keys for objects. This property may be <c>null</c>.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.NoContentResponseBuilder">
            <summary>
            Response builder that returns a response with no content (HTTP 204).
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.OwinRequestScopeContext.Current">
            <summary>
            Gets or sets the IOwinRequestScopeContext object for the current HTTP request.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.OwinRequestScopeExtensions.GetExternalBaseUrl(Microsoft.Owin.IOwinRequest)">
            <summary>
            Returns the base URL of this server as it was used by the client
            to make the request.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.PluginMethodSetProvider">
            <summary>
            Adds the method set providers loaded from plugins.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.RequestValidator">
            <summary>
            Generic request validator.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.RequestValidator.Name">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.RouteAndSet">
            <summary>
            Represents the combination of a method and a method set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.RouteAndSet.Route">
            <summary>
            Returns the route.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.RouteAndSet.Method">
            <summary>
            Returns the method set.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.RouteAndSet.GetFkCandidateRoutes">
            <summary>
            Returns the set of FK candidate routes defined by any HTTP method.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.SessionIdLayoutRenderer">
            <summary>
            Layout renderer to append the ASP.NET session ID to a log entry.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ApiManager.SessionIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Session ID appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.UnknownApiServerConfig">
            <summary>
            This is the default API server configuration, used when the server is running
            outside of a known hosting environment (for example, during validation).
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ApiManager.ValidationError">
            <summary>
            Represents an error that occurred during validation of a request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.ValidationError.ErrorCode">
            <summary>
            Gets or sets an error code that uniquely identifies this error.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ApiManager.ValidationError.Message">
            <summary>
            Gets or sets a descriptive validation error message.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Api.UseCultureNativeNameApi">
            <summary>
            API modifier that configures the QBMCulture candidate API to use native name displays.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Cache.CachedResponseBuilder">
            <summary>
            Emits a cached response to the client.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Cache.CachedSelector">
            <summary>
            Response builder that emits a cached response, or generates a new response.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Cache.CachingResponseBuilder">
            <summary>
            Generates response data and stores it in the cache.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.CaptchaExtendedData">
            <summary>
            Configures an API method so that the client must supply a CAPTCHA code when calling the method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Captcha.CaptchaCode.Code">
            <summary>
            Represents the code entered by the user.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.CaptchaImage">
            <summary>
            HTTP service to generate a CAPTCHA image.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.ICaptchaImageService">
            <summary>
            Service that generates CAPTCHA-style images.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.ICaptchaValidator">
            <summary>
            Represents the validator used to validate CAPTCHA codes generated by the <see cref="T:QBM.CompositionApi.Captcha.CaptchaImage"/> class.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Captcha.ICaptchaValidator.TestKey">
            <summary>
            Gets or sets a constant CAPTCHA code that will always be accepted.
            </summary>
            <remarks>This setting is intended for automated testing environments.
            For security purposes, this
            setting has no effect in production environments.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Captcha.ICaptchaValidator.CaseInsensitive">
            <summary>
            Gets or sets a flag indicating whether the code check is case-sensitive.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Captcha.IRequestCaptchaValidator.ValidateAsync(System.String,System.String,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Validates a CAPTCHA code.
            </summary>
            <returns><c>null</c> or an error message</returns>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.RecaptchaValidator">
            <summary>
            Validator for ReCAPTCHA codes.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Captcha.RecaptchaApiProvider">
            <summary>
            Configures the API project to use ReCAPTCHA validation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Compression.CompressedContent">
            <summary>
            Compresses another HttpContent object using gzip or deflate compression.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Compression.CompressedContent.GetCompressedOrOriginalContent(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpContent)">
            <summary>
            Builds a gzip or deflate compressed content if the client accepts compressed
            content, and the original content otherwise.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Config.ApplicationMethodConfig">
            <summary>
            Represents application-specific configuration of method sets.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.ApplicationMethodConfig.AllProjects">
            <summary>
            Gets or sets a flag indicating if all projects should be loaded, even the ones
            not explicitly listed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.IApiServerConfig.IsStandAlone">
            <summary>
            Returns a value indicating if this server is running
            as a stand-alone installation.
            </summary>
            <remarks>This property should return <c>false</c> if the
            server is running in a load balancing pool. In this case,
            overriding local configuration should not be applied that
            could break behavior for clients.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Config.IApiServerConfig.AddServiceConnectionHook(System.Func{VI.DB.Entities.ISession,System.IDisposable})">
            <summary>
            Registers an action to be called on every creation of a new service connection.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Config.IApiServerConfig.Restart">
            <summary>
            Triggers a restart of the API Server in a way that reinitializes the API.
            </summary>
        </member>
        <member name="E:QBM.CompositionApi.Config.IApiServerConfig.Disposing">
            <summary>
            Called when the server environment is shutting down.
            </summary>
        </member>
        <member name="E:QBM.CompositionApi.Config.IApiServerConfig.PreparingShutdown">
            <summary>
            Called when the server enters the <see cref="F:QBM.CompositionApi.ApiManager.ApiServerStateEnum.PrepareUnavailable"/> state,
            or when the server is being disposed. This event is only invoked once.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.IApiServerRequest.Domain">
            <summary>
            Returns the domain to be used for cookies.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.IApiServerRequest.Path">
            <summary>
            Returns the path to be used for cookies.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.IMethodConfiguration.Url">
            <summary>
            Key of the API method, with slashes replaced by underscores.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Config.ProjectLevelConfig">
            <summary>
            Common project-level configuration settings for an API project.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.ProjectLevelConfig.DefaultPageSize">
            <summary>
            The default number of rows to load.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Config.ProjectLevelConfig.CaptchaCaseInsensitive">
            <inheritdoc cref="P:QBM.CompositionApi.Captcha.ICaptchaValidator.CaseInsensitive"/>
        </member>
        <member name="P:QBM.CompositionApi.Config.ProjectLevelConfig.CaptchaTestKey">
            <inheritdoc cref="P:QBM.CompositionApi.Captcha.ICaptchaValidator.TestKey"/>
        </member>
        <member name="T:QBM.CompositionApi.Config.ServerLevelConfig">
            <summary>
            Server-level configuration settings
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <summary>
            Adds an additional <c>GET</c> method handler based on entity data.
            </summary>
            <remarks>The method handler can resolve an <see cref="T:VI.DB.Entities.IEntity"/> object to run code
            based on the current state. Note that the method handler is not allowed
            to modify an interactive entity.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <inheritdoc cref="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)"/>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet``1(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Func{VI.DB.Entities.IEntity,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <inheritdoc cref="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)"/>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet``2(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <inheritdoc cref="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)"/>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet``2(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Func{``0,QBM.CompositionApi.ExtendedData.IExtendedData,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <inheritdoc cref="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)"/>
        </member>
        <member name="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet``1(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Func{VI.DB.Entities.IEntity,QBM.CompositionApi.ExtendedData.IExtendedData,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <inheritdoc cref="M:QBM.CompositionApi.Crud.AddGetExtensions.AddGet(QBM.CompositionApi.Crud.ICrudMethod,System.String,System.Type,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)"/>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudExtensions.FromTable(QBM.CompositionApi.Definition.IMethod)">
            <summary>
            Creates an API method that will read/write data from a database table, but the
            related table is not known at compile time.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudExtensions.GetCrudModel(QBM.CompositionApi.Definition.IMethod)">
            <summary>
            Returns the existing CRUD model for the given method, or null if there is none.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudExtensions.WithResultColumns``1(``0,System.String[])">
            <summary>
            Configures the specified database columns to be returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudExtensions.GetPathPkParameters(QBM.CompositionApi.Crud.ICrudModel)">
            <summary>
            Returns all column names that are defined by path parameters in the route.
            </summary>
            <remarks>The method also returns non-primary key column names.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IReadBase.Hierarchy">
            <summary>
            Gets or sets the hierarchy provider for querying hierarchical tables.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IReadBase.EnableDataModelApi">
            <summary>
            Gets or sets a flag indicating whether the API endpoint for the
            data model is active.
            </summary>
            <remarks>If this flag is enabled, an additional <c>/datamodel</c> endpoint will be available
            to query data model information about this endpoint.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IUpdateBase.Description">
            <summary>
            Gets or sets the description for the method verb used to update an entity.
            </summary>
            <remarks>If this value is <c>null</c>, the method description will be used.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IUpdateBase.BulkDescription">
            <summary>
            Gets or sets the description for the method verb used for entity bulk updates.
            </summary>
            <remarks>If this value is <c>null</c>, the <see cref="P:QBM.CompositionApi.Crud.IUpdateBase.Description"/> will be used.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IUpdateBase.SingleDescription">
            <summary>
            Gets or sets the description for the method verb used for single entity read.
            </summary>
            <remarks>If this value is <c>null</c>, the <see cref="P:QBM.CompositionApi.Crud.IUpdateBase.Description"/> will be used.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IUpdateBase.EnableSingleEntityRead">
            <summary>
            Gets or sets a flag indicating whether the API will create a route to update single entities.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICreate`1.Description">
            <inheritdoc cref="P:QBM.CompositionApi.Crud.ICreate.Description"/>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICreate.Description">
            <summary>
            Gets or sets the description for the method verb used to create a new entity.
            </summary>
            <remarks>If this value is <c>null</c>, the method description will be used.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IDelete`1.Description">
            <inheritdoc cref="P:QBM.CompositionApi.Crud.IDelete.Description"/>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IDelete.Description">
            <summary>
            Gets or sets the description for the method verb used to create a new entity.
            </summary>
            <remarks>If this value is <c>null</c>, the method description will be used.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Crud.CrudMethodRouteProvider">
            <summary>
            Creates all routes required to represent the CRUD model.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.FilterTreeElement.HasHierarchy">
            <summary>
            Returns a flag indicating if this element has child elements.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.FilterTreeElement.Filter">
            <summary>
            A filter definition that can be used to filter the base data endpoint. This property may be <c>null</c>.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Crud.ICrudModel`1">
            <summary>
            The CRUD model represents a common property model for the different CRUD operations
            working on the same model.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.ICrudModel`1.Wrap(VI.DB.Entities.IEntity)">
            <summary>
            Builds a type-safe wrapper for the supplied entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.Method">
            <summary>
            Returns the associated base method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.DoNotCreateTypedModel">
            <summary>
            If this flag is set, skip typed model generation for this CRUD model.
            </summary>
            <remarks>Set this flag if this model is expected to be used only in generic calls.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.TableName">
            <summary>
            Gets or sets the associated table name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.Modifiers">
            <summary>
            Returns the property modifiers indexed by column name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.DisabledCandidateRoutes">
            <summary>
            Returns the set of properties that should not cause foreign-key candidate
            routes to be generated.
            </summary>
            <remarks>You can also use <c>ColumnName.TableName</c> notation to exclude
            specific parent tables.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.WritableColumns">
            <summary>
            Returns the set of writable columns. This property is <c>null</c> if
            the <see cref="P:QBM.CompositionApi.Crud.ICrudModel.Operations"/> property does not allow any write
            operations.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.ICrudModel.CalculatedProperties">
            <summary>
            Returns the set of calculated properties that should be exposed to the client.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudModel`1.ValidateAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            For out-of-band result evaluation
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudModel`1.Get(QBM.CompositionApi.Definition.IMethod,System.Func{VI.DB.Entities.IEntity,`0},QBM.CompositionApi.Definition.ITableDescriptors)">
            <summary>
            Creates a CRUD model for the given method. This method helps to ensure that there is
            only one CRUD model per method.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.CrudModel`1.GetExisting(QBM.CompositionApi.Definition.IMethod)">
            <summary>
            Returns the existing CRUD model for the given method, or null if there is none.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Crud.ICrudMethodValidation">
            <summary>
            Marker interface to identify CRUD methods.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IDynamicFilter.Delimiter">
            <summary>
            Returns the delimiter string that can be used to join multiple filter values.
            If this is <c>null</c>, filter values are mutually exclusive and cannot be combined.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Crud.IDynamicFilter.GetClausesAsync(QBM.CompositionApi.Handling.IRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the clauses to apply to the query.
            </summary>
            <param name="request">The current request.</param>
            <param name="ct">Supports cancellation.</param>
        </member>
        <member name="P:QBM.CompositionApi.Crud.PredefinedFilterOption.GroupNames">
            <summary>
            Returns the set of permission groups that grant access to this filter option.
            </summary>
            <remarks>To enable the option, a user must either have at least one of the permission groups
            assigned or at least one of the program features.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Crud.PredefinedFilterOption.FeatureNames">
            <summary>
            Returns the set of program features that grant access to this filter option.
            </summary>
            <remarks>To enable the option, a user must either have at least one of the permission groups
            assigned or at least one of the program features.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Crud.IViewConfigProvider.GetValidColumnNamesAsync(VI.DB.Entities.ISession,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the set of column names that are valid for selection in custom view configurations.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Crud.IViewConfigSet">
            <summary>
            Represents a set of view configurations available to the user.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IViewConfigSet.DefaultConfigId">
            <summary>
            Returns the ID of the default configuration within <see cref="P:QBM.CompositionApi.Crud.IViewConfigSet.Configurations"/>.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Crud.IViewConfigSet.OptionalColumns">
            <summary>
            Set of columns that the user can pick to add to a view.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Crud.LimitedValueFilter">
            <summary>
            Represents a generic filter based on a limited-value column.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.CalculatedProperty">
            <summary>
            Property that will return a value calculated at runtime.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty.#ctor(System.String,VI.Base.ValType,System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{QBM.CompositionApi.Dto.EntityColumnData}},System.Boolean)">
            <summary>
            Builds a read-only property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty.#ctor(System.String,VI.Base.ValType,QBM.CompositionApi.DataSources.IPropertyValueProvider,System.Boolean)">
            <summary>
            Builds a read-only property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty.#ctor(QBM.CompositionApi.Definition.PropertyMetaData,System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{QBM.CompositionApi.Dto.EntityColumnData}})">
            <summary>
            Builds a read-write property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty.#ctor(QBM.CompositionApi.Definition.PropertyMetaData,QBM.CompositionApi.DataSources.IPropertyValueProvider)">
            <summary>
            Builds a read-write property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.CalculatedProperty.ColumnName">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.DataSources.CalculatedProperty.Value">
            <summary>
            Gets or sets the value provider for this property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty.GetValuesAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.DataSources.CalculatedPropertyBulk`1">
            <summary>
            Property that will return a value calculated at runtime with type safety and bulk value calculation.
            </summary>
            <typeparam name="T">Data type of the property</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedPropertyBulk`1.#ctor(System.String,System.Func{QBM.CompositionApi.DataSources.IBulkPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{`0}}})">
            <summary>
            Creates a new calculated property with async value evaluation.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedPropertyBulk`1.#ctor(System.String,System.Func{QBM.CompositionApi.DataSources.IBulkPropertyValueContext,System.Collections.Generic.IReadOnlyList{`0}})">
            <summary>
            Creates a new calculated property with synchronous value evaluation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.CalculatedProperty`1">
            <summary>
            Property that will return a value calculated at runtime with type safety.
            </summary>
            <typeparam name="T">Data type of the property</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty`1.#ctor(System.String,System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            Creates a new calculated property with async value evaluation.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CalculatedProperty`1.#ctor(System.String,System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,`0},System.Boolean)">
            <summary>
            Creates a new calculated property with async value evaluation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.ColumnOrderBy">
            <summary>
            Represents a column sorting.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.ColumnOrderBy.#ctor(QBM.CompositionApi.Handling.IServerProperty)">
            <summary>
            Creates a new <c>ColumnOrderBy</c> for the given column.
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ColumnOrderBy.IsDescending">
            <summary>
            Gets or sets a flag indicating whether descending sort will be used.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ColumnOrderBy.SortColumn">
            <summary>
            Returns the column which is used for sorting.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.CrProperty">
            <summary>
            Calculated property to provide data by evaluating child relations.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.CrProperty.RelationDbWhereClause">
            <summary>
            Gets or sets an additional WHERE clause function to filter the loaded objects.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.CrProperty.TargetColumnName">
            <summary>
            Gets or sets the name of the database column that will provide the target values.
            </summary>
            <remarks>If this property is <c>null</c>, then the primary key is used.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CrProperty.ConfigureAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <inheritdoc cref="T:QBM.CompositionApi.Definition.ICalculatedProperty" />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CrProperty.GetValuesAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.DataSources.DataSourceQuery">
            <summary>
            Class managing behaviour when loading database objects.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.DataSources.DataSourceQuery.DefaultPageSize">
            <summary>
            The default number of rows to load.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.DataSourceQuery.PageSize">
            <summary>
            Gets or sets the page size for the query. Negative values are allowed and cause the query
            not to return any results. A value of <c>null</c> disables the paging limitation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.DbDataSource">
            <summary>
            Data source that supports page-based object loading from the database.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.DataSources.DbDataSource.DefaultEntriesPerPage">
            <summary>
            Returns the default number of rows for a paged load operation.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.DataSources.DbDataSource.MaxRows">
            <summary>
            Returns the maximum number of rows which will be loaded in a single load operation.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.DbDataSource.#ctor(VI.DB.MetaData.IMetaTable,QBM.CompositionApi.Definition.IModifierService,QBM.CompositionApi.Crud.ICrudModel,QBM.CompositionApi.Performance.IPerfLogService)">
            <summary>
            Creates a new data source loading from the database.
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.DbDataSource.Sorters">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.DbDataSource.SetOrderBy(System.String)">
            <summary>
            Configures this data source to use the supplied ORDER BY clause.
            </summary>
            <param name="orderBy"></param>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.DbDataSource.GetDataAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.DbDataSource.HasAnyDataAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.DbDataSource.GetTotalCountAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IEntityWriteFilter">
            <summary>
            Represents a write filter, which can intercept changes made to an entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IEntityWriteFilter.CheckChangesAsync(VI.DB.Entities.IEntity,System.Collections.Generic.IReadOnlyList{QBM.CompositionApi.Dto.EntityWriteDataColumn},System.Threading.CancellationToken)">
            <summary>
            Called when changes to an entity are about to be made. The method should throw an exception for any invalid changes.
            </summary>
            <param name="entity">Returns the entity which is about to be changed.</param>
            <param name="values">Returns change information.</param>
            <param name="ct">Supports cancellation.</param>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.EntityWriteFilter">
            <summary>
            Generic write filter implementation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.EnumProperty`1">
            <summary>
            String-based calculated property based on an enumeration type.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.EnumDisplayNameAttribute.DisplayName">
            <summary>
            Specifies the display name for the member, which is used as a key in translations.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.Files.IFileStorage">
            <summary>
            Represents a simple file system abstraction.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.FkProperty">
            <summary>
            Calculated property to provide data by evaluating foreign-key relations.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.FkProperty.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a foreign-key property.
            </summary>
            <param name="propertyName">Name of the property in the API model.</param>
            <param name="parentTableName">Name of the parent table of the foreign-key relation.</param>
            <param name="parentColumnName">>Name of the parent table of the foreign-key relation.</param>
            <param name="childColumnName">>Name of the child column of the foreign-key relation.</param>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.FkProperty.ConfigureAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <inheritdoc cref="T:QBM.CompositionApi.Definition.ICalculatedProperty" />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.FkProperty.GetValuesAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.DataSources.FkProperty.ValueProvider">
            <summary>
            Gets or sets the function to obtain the value from the parent entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.FkProperty.ColumnNamesToLoad">
            <summary>
            Gets a set of column names to load for the parent entities.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.HyperViewDataProvider">
            <summary>
            Provides data for hyperviews.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.ShapeData">
            <summary>
            Represents for a single hyperview shape.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.IsDeleted">
            <summary>
            Returns a flag indicating whether the shape should show that the object is in a deleted state.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.Caption">
            <summary>
            Returns the title caption of the shape.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.HeaderText">
            <summary>
            Returns an optional, secondary header text.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.Identifier">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.ObjectKey">
            <summary>
            Returns the object key of the associated object.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.ElementColor">
            <summary>
            Returns the shape color to use, in ARGB hex format.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.Elements">
            <summary>
            Returns a list of elements to be displayed inside this shape.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.IsLimitReached">
            <summary>
            Returns a flag indicating whether the list of element is truncated because
            the maximum number of elements was reached.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.LayoutType">
            <summary>
            Returns the layout type to use for this shape.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeData.Properties">
            <summary>
            Returns a list of properties to be displayed inside this shape.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.ShapeListEntry.ObjectKey">
            <summary>
            Returns the object key of the associated object. This property may be <c>null</c>.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IDataSource">
            <summary>
            Interface for a configurable data source.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IDataSource.Sorters">
            <summary>
            Returns the sorting settings.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IDataSource.GetDataAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <summary>
            Returns the data rows according to the data source's settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IDataSource.HasAnyDataAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <summary>
            Returns a value indicating whether the data source contains at least one data row.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IDataSource.GetTotalCountAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.DataSources.DataSourceQuery,System.Threading.CancellationToken)">
            <summary>
            Returns the number of total entries.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IDataSourceOrderBy">
            <summary>
            Interface for data source sorting providers.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IDataSourceOrderBy.IsDescending">
            <summary>
            Gets or sets a value indicating whether descending sort should be applied.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IDataSourceOrderBy.SortColumn">
            <summary>
            Column that supplies the values used for sorting the data source.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IHyperViewProvider.GetHyperviewAsync(VI.DB.Entities.ISession,VI.DB.Entities.IEntity,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the shape data for a HyperView for a given object.
            </summary>
            <param name="entity">Object for which to show a HyperView</param>
            <param name="nodeName">Optional identifier of the specific overview node to use</param>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PostLoadProcessorExtensions.Combine(QBM.CompositionApi.DataSources.IPostLoadProcessor,QBM.CompositionApi.DataSources.IPostLoadProcessor)">
            <summary>
            Creates a new combined processor which executes the filters in order.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.CombinedProcessor.#ctor(QBM.CompositionApi.DataSources.IPostLoadProcessor,QBM.CompositionApi.DataSources.IPostLoadProcessor)">
            <summary>
            Creates a new combined processor which executes the filters in order.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyContextBase.Session">
            <summary>
            Gets the database session.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyContextBase.Translator">
            <summary>
            Gets the translator object.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IPropertyDisplayContext">
            <summary>
            Represents the context of display value generation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyDisplayContext.Entities">
            <summary>
            Gets the entities to provide a value for.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IPropertyValueProvider">
            <summary>
            Interface for value providers.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.IPropertyValueProvider.GetValuesAsync(QBM.CompositionApi.DataSources.IBulkPropertyValueContext,System.Threading.CancellationToken)">
            <summary>
            Calculates property values.
            </summary>
            <remarks>The returned list must contain a for each of the entities in
            <see cref="P:QBM.CompositionApi.DataSources.IBulkPropertyValueContext.Entities"/> in the same order.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.PropertyValueProvider">
            <summary>
            Generic <see cref="T:QBM.CompositionApi.DataSources.IPropertyValueProvider"/> implementation.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Factory method to build a string-typed value provider using an asynchronous value function.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.String})">
            <summary>
            Factory method to build a string-typed value provider using a synchronous value function.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Factory method to build a boolean-typed value provider using an asynchronous value function.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Boolean})">
            <summary>
            Factory method to build a boolean-typed value provider using a synchronous value function.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.DateTime})">
            <summary>
            Factory method to build a boolean-typed value provider using a synchronous value function.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyValueProvider.Build(System.Func{QBM.CompositionApi.DataSources.IPropertyValueContext,System.Int32})">
            <summary>
            Factory method to build an integer-typed value provider using a synchronous value function.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IBulkPropertyValueContext">
            <summary>
            Represents a property value evaluation context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IBulkPropertyValueContext.Entities">
            <summary>
            Returns the entities to provide values for.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IBulkPropertyValueContext.Request">
            <summary>
            Returns the current request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IBulkPropertyValueContext.Property">
            <summary>
            Returns the property to provide values for.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IBulkPropertyValueContext`1">
            <summary>
            Represents a property value evaluation context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IBulkPropertyValueContext`1.Entities">
            <summary>
            Returns the entities to provide values for.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.IPropertyValueContext">
            <summary>
            Represents a property value evaluation context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyValueContext.Entity">
            <summary>
            Gets the entity to provide a value for.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyValueContext.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.IPropertyValueContext.Property">
            <summary>
            Gets the property to provide a value for.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.LogFileProvider.GetLogDirectories(NLog.Targets.FileTarget)">
            <summary>
            Converts nlog.config file name layouts to file system patterns.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.LookupProperty">
            <summary>
            Calculated property for generic value lookups.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.LookupProperty.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <c>LookupProperty</c> object.
            </summary>
            <param name="columnName">Name of the property in the data model.</param>
            <param name="connectProperty">Name of the property providing the starting value.</param>
            <param name="tableName">Name of the database table used for lookup.</param>
            <param name="matchProperty">Name of the property in <paramref name="tableName"/> used to match values.</param>
            <param name="returnProperty">Name of the property in <paramref name="tableName"/> that provides the return value.</param>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.MemberRelation.RelationTableName">
            <summary>
            Returns the name of the relation database table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.MemberRelation.ColumnNameLeft">
            <summary>
            Returns the column name for the left side of the relation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.MemberRelation.ColumnNameRight">
            <summary>
            Returns the column name for the right side of the relation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.MemberRelationEntity.RelationDbWhereClause">
            <summary>
            Gets or sets an additional WHERE clause function to filter the loaded objects.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.MemberRelationEntity.LoadMembersAsync(VI.DB.Entities.ISession,System.Threading.CancellationToken)">
            <summary>
            Loads the objects which are currently selected in the database.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.MrProperty">
            <summary>
            Calculated property to provide data by evaluating member relations (M:N or M:All tables).
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.MrProperty.RelationDbWhereClause">
            <summary>
            Gets or sets an additional WHERE clause function to filter the loaded objects.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.MrProperty.ConfigureAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.DataSources.MrProperty.GetValuesAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.DataSources.PostLoadFilteredDataSource">
            <summary>
            Data source implementation that processes the results of another data source using search results.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.PropertyDisplayBuilder.GetDisplayValuesAsync(QBM.CompositionApi.DataSources.IPropertyContextBase,System.Collections.Generic.IReadOnlyList{VI.Base.DbVal},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Builds display strings for the input values according to the property definition.
            </summary>
            <param name="context">Evaluation context</param>
            <param name="values">Input values</param>
            <param name="useLongDisplay">Obtains long display values where applicable</param>
            <param name="ct">Supports cancellation</param>
            <returns>Display strings in the order of the input values</returns>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.SqlWizard.DefaultSqlWizardConfiguration">
            <summary>
            Default SQL wizard configuration implementation.
            </summary>
            <remarks>This configuration returns only columns that are enabled for the filter designer,
            except for privileged users.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.Diff.#ctor(VI.DB.Entities.ISession,System.String,System.Boolean,System.String,System.String)">
            <param name="allornothing">Indicates how the comparer is initialized if basewhereclause AND customwhereclause are empty=> true:1=1, false: 1=0 </param>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.EntitySqlWizardConfiguration.#ctor(System.String,System.String)">
            <param name="tableName">Base table for the filter condition</param>
            <param name="columnName">Name of the column where the WHERE clause is stored</param>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions">
            <summary>
            Extensiom methods for SQL-Wizard context
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions.ToExpressionAsync(VI.SqlWizard.DataStructure.WhereClause,VI.DB.Entities.ISession,QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration,QBM.CompositionApi.Cache.IEntityDisplayCache,System.Threading.CancellationToken)">
            <summary>
            Converts a where clause to client side expression
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions.ToExpressionAsync(VI.SqlWizard.DataStructure.Expression,VI.DB.Entities.ISession,QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration,QBM.CompositionApi.Cache.IEntityDisplayCache,System.Threading.CancellationToken)">
            <summary>
            Converts a server side expression to client side structure
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions.ToChildExpressionListAsync(VI.SqlWizard.DataStructure.WhereClause,VI.DB.Entities.ISession,QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration,QBM.CompositionApi.Cache.IEntityDisplayCache,System.Threading.CancellationToken)">
            <summary>
            Converts the where clause children to client side expression
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions.ToWhereClauseAsync(QBM.CompositionApi.DataSources.SqlWizard.SqlExpression,VI.DB.Entities.ISession,System.String,QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration,System.Threading.CancellationToken)">
            <summary>
            Converts client side expression to server side WHERE clause
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardExtensions.ToExpressionAsync(QBM.CompositionApi.DataSources.SqlWizard.SqlExpression,VI.DB.Entities.ISession,System.String,QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration,System.Threading.CancellationToken)">
            <summary>
            Converts client side expression to server side expression
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.IEntitySqlWizardConfiguration.GetAdapter(VI.DB.Entities.IEntity)">
            <summary>
            Builds an SQL wizard adapter for the specified entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration.GetFilterPropertiesAsync(VI.DB.Entities.ISession,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the valid filterable properties on the specified table.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DataSources.SqlWizard.ISqlWizardConfiguration.GetWhereClauseAsync(VI.DB.Entities.ISession,System.String,QBM.CompositionApi.DataSources.SqlWizard.SqlExpression,System.Threading.CancellationToken)">
            <summary>
            Returns the WHERE clause corresponding to the expression tree.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression">
            <summary>
            Represents an expression tree.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression.Expressions">
            <summary>
            Child expressions
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression.LogOperator">
            <summary>
            The logical operator between expressions on the same level
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression.Operator">
            <summary>
            Operator which is applied to the value
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression.Value">
            <summary>
            The value for the expression
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlExpression.DisplayValues">
            <summary>
            Contains the display values in case that the value is a foreign-key reference or a set of foreign-key references.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.SqlWizard.SqlOperator">
            <summary>
            Represents SQL operator data
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlOperator.Label">
            <summary>
            Label for operator
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlOperator.Type">
            <summary>
            Type for operator
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.DataSources.SqlWizard.SqlWizard.Context">
            <summary>
            Gets or sets a context for this SqlWizard.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.DataSources.SqlWizard.SqlWizardMethod">
            <summary>
            Creates a SQL wizard method providing structure information for generic data filtering.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ApiMultiLanguage.GetAllMlData">
            <summary>
            Returns all multi-language strings referenced in the API.
            </summary>
            <returns></returns>
        </member>
        <member name="P:QBM.CompositionApi.Definition.RouteProviderCollection.Settings">
            <summary>
            Returns the method settings.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteProviderCollection.Add(QBM.CompositionApi.ApiManager.IMethodRoute)">
            <summary>
            Adds a static route to this collection.
            </summary>
            <param name="route"></param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.BinaryDataRouteProvider.DispositionType">
            <summary>
            Gets or sets the value for the <c>Content-Disposition</c> HTTP header.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.DbColumnBinaryDataRouteProvider.FileExtension">
            <summary>
            A file extension, not prefixed by a dot, to be used in constructing the file name.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.CustomEntityDescriptor">
            <summary>
            Represents a custom entity.
            </summary>
            <remarks>The data in this class will be used to build an entity
            which is returned to the client.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.Definition.EntitySearchMode.Default">
            <summary>
            The search result set is loaded first, and the result set are used to filter the database result set.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Definition.EntitySearchMode.SearchAfterLoad">
            <summary>The database result set is loaded first, and the search operates on that result set.</summary>
            <remarks>Use this mode if the filtered result set can be expected to be much smaller than the total amount of
            rows in the database table.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.Definition.EntitySearchMode.LoadCached">
            <summary>
            The search result set and database result sets are individually loaded, cached, and processed
            in-memory.
            </summary>
            <remarks>The base result set is cached. This is the result from a call to the API method without any parameters. The <c>LoadCached</c> mode
            requires that this base result set is a superset of all possible result sets.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.SubscribeProcessing``1(``0,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the method processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.SubscribeProcessing``1(``0,System.Action{QBM.CompositionApi.Handling.IRequest})">
            <summary>
            Subscribes to the method processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithFkWhereClause``1(``0,System.String,System.String,System.String)">
            <summary>
            Configures a static WHERE clause that limits the objects that can be assigned as a foreign-key value.
            </summary>
            <param name="method">Base method</param>
            <param name="columnName">Name of the foreign-key child column</param>
            <param name="tableName">Name of the foreign-key parent table</param>
            <param name="whereClause">WHERE clause</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithSingleEntityRead``1(``0,System.String,System.Boolean)">
            <summary>
            Configures a route to read a single entity, automatically adding primary key value parameters.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithEntityValueParameter``1(``0,System.String,System.String)">
            <summary>
            Adds support for a route parameter that corresponds to a value of an entity.
            </summary>
            <remarks>This will apply filtering of the result set and will
            set the value when creating a new entity.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithEntityValueParameterFix``1(``0,System.String,System.Object)">
            <summary>
            Adds support for a route parameter that corresponds to a value of an entity.
            </summary>
            <remarks>This will apply filtering of the result set and will
            set the value when creating a new entity.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithFkWhereClause``1(``0,System.String,System.String,System.Func{QBM.CompositionApi.Definition.IFkWhereClauseContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Configures a dynamic WHERE clause that limits the objects that can be assigned as a foreign-key value.
            </summary>
            <param name="method">Base method</param>
            <param name="columnName">Name of the foreign-key child column</param>
            <param name="tableName">Name of the foreign-key parent table</param>
            <param name="whereClause">WHERE clause provider</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithFkWhereClause``1(``0,System.String,System.String,System.Func{QBM.CompositionApi.Definition.IFkWhereClauseContext,System.String})">
            <summary>
            Configures a dynamic WHERE clause that limits the objects that can be assigned as a foreign-key value.
            </summary>
            <param name="method">Base method</param>
            <param name="columnName">Name of the foreign-key child column</param>
            <param name="tableName">Name of the foreign-key parent table</param>
            <param name="whereClause">WHERE clause provider</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithFkWhereClause``1(``0,System.String,System.String,QBM.CompositionApi.Definition.IFkWhereClauseProvider)">
            <summary>
            Configures a dynamic WHERE clause that limits the objects that can be assigned as a foreign-key value.
            </summary>
            <param name="method">Base method</param>
            <param name="columnName">Name of the foreign-key child column</param>
            <param name="tableName">Name of the foreign-key parent table</param>
            <param name="whereClauseProvider">WHERE clause provider</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithFkHierarchy``1(``0,System.String,System.String,QBM.CompositionApi.Data.IHierarchyProvider)">
            <summary>
            Configures a foreign-key relation to use a table hierarchy.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithTableName``1(``0,System.String)">
            <summary>
            Changes the database table to load entities from.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithResultColumns``1(``0,System.String[])">
            <summary>
            Configures the specified database columns to be returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithAdditionalColumns``1(``0,System.String[])">
            <summary>
            Configures the specified database columns to be loaded from the database, but not returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Modify``1(``0,System.String,System.Action{QBM.CompositionApi.Definition.PropertyModifier})">
            <summary>
            Register a modifier for a property.
            </summary>
            <param name="obj">Base method</param>
            <param name="columnName">Name of the column to modify.</param>
            <param name="modifier">Action that configures the property modifier.</param>
            <returns></returns>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithWritableColumns``1(``0,System.String,System.Func{VI.DB.Entities.IEntity,System.Boolean})">
            <summary>
            Defines a dynamic condition for a writable column.
            </summary>
            <param name="conditionFunc">Callback which should return <c>true</c> if the column should be writable.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``2(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,``1})">
            <summary>
            Defines a synchronous handler for an HTTP request that returns JSON data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <typeparam name="TResult">Type of data object that will be sent to the client. This type must be serializable to JSON.</typeparam>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``1(QBM.CompositionApi.Definition.IMethod,System.String,System.Action{``0,QBM.CompositionApi.Handling.IRequest})">
            <summary>
            Defines a synchronous handler for an HTTP request that returns no data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="action">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle(QBM.CompositionApi.Definition.IMethod,System.String,System.Action{QBM.CompositionApi.Handling.IRequest})">
            <summary>
            Defines a synchronous handler for an HTTP request that expects no input
            and returns no data.
            </summary>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="action">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``2(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            Defines an asynchronous handler for an HTTP request that returns JSON data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <typeparam name="TResult">Type of data object that will be sent as JSON to the client.</typeparam>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``1(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Defines an asynchronous handler for an HTTP request that returns no data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Defines an asynchronous handler for an HTTP request that expects no input data,
            and returns no data.
            </summary>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``1(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,``0})">
            <summary>
            Defines a synchronous handler for an HTTP request that expects no input data
            and returns JSON data.
            </summary>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``1(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP request that expects no input data
            and returns JSON data.
            </summary>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle``1(QBM.CompositionApi.Definition.IMethod,System.String,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <summary>
            Defines a generic handler for an HTTP request.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Handle(QBM.CompositionApi.Definition.IMethod,System.String,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <summary>
            Defines a generic handler for an HTTP request that takes no input data.
            </summary>
            <param name="method">Base method</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGet(QBM.CompositionApi.Definition.IMethod,QBM.CompositionApi.ApiManager.IResponseBuilderSelector,System.Type)">
            <summary>
            Defines a generic GET handler for an HTTP request.
            </summary>
            <param name="method">Base method</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
            <param name="defaultResultType">Type of data object that will be sent to the client.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGet``1(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP GET request that returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="method">Base method</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGet``1(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP GET request and returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="method">Base method</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGet``1(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,``0})">
            <summary>
            Defines a synchronous handler for an HTTP GET request that returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="method">Base method</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithDescription``1(``0,System.String)">
            <summary>
            Sets a description for this method.
            </summary>
            <param name="method">Base method</param>
            <param name="description">Descriptive text</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithVerbDescription``1(``0,System.String)">
            <summary>
            Sets a description for this verb.
            </summary>
            <param name="method">Base method</param>
            <param name="description">Descriptive text</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetByQuery(QBM.CompositionApi.Definition.IMethod,System.String,System.String)">
            <summary>
            Defines a method for a GET handler that returns entities from the database.
            </summary>
            <param name="method">Base method</param>
            <param name="tableName">Name of the database table</param>
            <param name="whereClause">Static WHERE clause</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetByQuery(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.String})">
            <summary>
            Defines a method for a GET handler that returns entities from the database.
            </summary>
            <param name="method">Base method</param>
            <param name="tableName">Name of the database table</param>
            <param name="whereClause">Function that returns a WHERE clause for a given request</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetByQuery(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Defines a method for a GET handler that returns entities from the database.
            </summary>
            <param name="method">Base method</param>
            <param name="tableName">Name of the database table</param>
            <param name="whereClause">Asynchronous function that returns a WHERE clause for a given request</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetBinaryData(QBM.CompositionApi.Definition.IMethod,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Defines a handler for a GET request that returns binary data, such as images.
            </summary>
            <param name="method">Base method.</param>
            <param name="tableName">The database table name.</param>
            <param name="columnName">The name of the database column containing binary data.</param>
            <param name="keyParameterName">The name of the URL parameter containing the primary key.</param>
            <param name="mimeType">If set, the specified MIME type will be used. If not set, the
            handler will try to infer an image type from the binary data.</param>
            <param name="fileExtension"><inheritdoc cref="P:QBM.CompositionApi.Definition.DbColumnBinaryDataRouteProvider.FileExtension"/></param>
            <param name="dispositionType"><inheritdoc cref="P:QBM.CompositionApi.Definition.BinaryDataRouteProvider.DispositionType"/></param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetCustomEntities(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{QBM.CompositionApi.Definition.ICustomEntityDescriptor}}})">
            <summary>
            Defines a method for a GET handler that returns custom-defined entities.
            </summary>
            <seealso cref="T:QBM.CompositionApi.Definition.ICustomEntityDescriptor"/>
            <param name="method">Base method</param>
            <param name="factory">Asynchronous function that returns entity descriptors for a given request</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetCustomEntities``1(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Defines a method for a GET handler that returns custom-defined entities.
            </summary>
            <seealso cref="T:QBM.CompositionApi.Definition.ICustomEntityDescriptor"/>
            <param name="method">Base method</param>
            <param name="factory">Asynchronous function that returns entity descriptors for a given request</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetCustomEntities(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Collections.Generic.IEnumerable{QBM.CompositionApi.Definition.ICustomEntityDescriptor}})">
            <summary>
            Defines a method for a GET handler that returns custom-defined entities.
            </summary>
            <seealso cref="T:QBM.CompositionApi.Definition.ICustomEntityDescriptor"/>
            <param name="method">Base method</param>
            <param name="factory">Function that returns entity descriptors for a given request</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetBySqlStatement(QBM.CompositionApi.Definition.IMethod,System.String,QBM.CompositionApi.Definition.SqlStatementType)">
            <summary>
            Defines a method handler to return the result of a call
            to a pre-defined SQL statement.
            </summary>
            <param name="method">Base method.</param>
            <param name="statementName">Name of the pre-defined SQL statement.</param>
            <param name="statementType">Type of SQL statement.</param>
            <remarks>SQL parameter values will automatically be populated from the
            URL parameter values.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetBySqlStatement(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.String},QBM.CompositionApi.Definition.SqlStatementType)">
            <summary>
            Defines a method handler to return the results of one or more calls
            to pre-defined SQL statements.
            </summary>
            <param name="method">Base method.</param>
            <param name="statementName">Calculation function that returns the names
            of pre-defined SQL statements.</param>
            <param name="statementType">Type of SQL statement.</param>
            <remarks>SQL parameter values will automatically be populated from the
            URL parameter values. If you are running more than one statement, the
            result schemas of each statement must be identical.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.HandleGetBySqlStatement(QBM.CompositionApi.Definition.IMethod,System.Func{QBM.CompositionApi.Handling.IRequest,System.Collections.Generic.IReadOnlyList{QBM.CompositionApi.Definition.SqlStatementRun}},QBM.CompositionApi.Definition.SqlStatementType)">
            <summary>
            Defines a method handler to return the results of one or more calls
            to pre-defined SQL statements.
            </summary>
            <param name="method">Base method.</param>
            <param name="runs">Calculation function that returns the names
            of pre-defined SQL statement runs. Each run can have its own statement name
            and its own parameter values.</param>
            <param name="statementType">Type of SQL statement.</param>
            <remarks>If you are running more than one statement, the
            result schemas of each statement must be identical.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.WithPropertyList``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Applies the property list to an entity method.
            </summary>
            <remarks>The properties will be added as result columns; and all property modifiers will be applied.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.OrderBy``1(``0,System.String)">
            <summary>
            Defines a default <c>ORDER BY</c> clause.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.EnableWrite(QBM.CompositionApi.Definition.IEntityCollectionReadMethod)">
            <summary>
            Configures the method to allow delayed-logic writes to entities of a collection.
            </summary>
            <param name="method">Collection read method</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.EnableDeletion``1(``0)">
            <summary>
            Configures the method to allow deletion of entities.
            </summary>
            <param name="method">Collection read method</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.CreateNew(QBM.CompositionApi.Definition.IMethod,System.String)">
            <summary>
            Configures the method to allow creation of new delayed-logic entities.
            </summary>
            <param name="method">Base method</param>
            <param name="tableName">Name of the database table</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.CreateNew``1(``0)">
            <summary>
            Configures the method to allow creation of new delayed-logic entities.
            </summary>
            <param name="readMethod">Base method</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Subscribe``1(``0,System.Func{QBM.CompositionApi.Handling.IEntityProcessingContext,System.Threading.Tasks.Task},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Subscribe``1(``0,System.Action{QBM.CompositionApi.Handling.IEntityProcessingContext},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.Subscribe``1(``0,System.Func{QBM.CompositionApi.Handling.IEntityProcessingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods._ToBulk(QBM.CompositionApi.Handling.IBulkEntityProcessingContext,System.Func{QBM.CompositionApi.Handling.IEntityProcessingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Applies a single-entity processing handler to a bulk-entity processing context.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.SubscribeBulk``1(``0,System.Func{QBM.CompositionApi.Handling.IBulkEntityProcessingContext,System.Threading.Tasks.Task},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.SubscribeBulk``1(``0,System.Action{QBM.CompositionApi.Handling.IBulkEntityProcessingContext},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.SubscribeBulk``1(``0,System.Func{QBM.CompositionApi.Handling.IBulkEntityProcessingContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String)">
            <summary>
            Subscribes to the entity processing event.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ExtensionMethods.FindAttributeBasedApiProviders``1(QBM.CompositionApi.Definition.IExtensibilityService)">
            <summary>
            Looks up all API providers that implement the <see cref="T:QBM.CompositionApi.Definition.IApiProviderFor`1"/> interface.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.FkWhereClause">
            <summary>
            Represents a set of WHERE clause filters for foreign-key relations.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.FkWhereClause.#ctor">
            <summary>
            Creates a new <see cref="T:QBM.CompositionApi.Definition.FkWhereClause"/>.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.FkWhereClause.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:QBM.CompositionApi.Definition.FkWhereClause"/>.
            </summary>
            <param name="tableName">Name of the parent table of the FK relation.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.FkWhereClause.#ctor(System.Func{QBM.CompositionApi.Definition.IFkWhereClauseContext,System.String})">
            <summary>
            Creates a new <see cref="T:QBM.CompositionApi.Definition.FkWhereClause"/>.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.FkWhereClause.#ctor(System.Func{QBM.CompositionApi.Definition.IFkWhereClauseContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Creates a new <see cref="T:QBM.CompositionApi.Definition.FkWhereClause"/>.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.FkWhereClause.Static(System.String[])">
            <param name="whereClauses">A set of static WHERE clause strings to apply</param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.FkWhereClause.TableName">
            <summary>
            Returns the parent table name of the foreign key relation.
            </summary>
            <remarks>If this is <c>null</c>, the settings apply to any parent table.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.FkWhereClause.WhereClauseProviders">
            <summary>
            Returns the list of WHERE clause providers.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IFkWhereClauseProvider.IsDynamic">
            <summary>
            Returns a flag indicating whether this FK where clause depends
            on the contents of the base entity.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.StaticFkWhereClause">
            <summary>
            Static foreign-key WHERE clause provider that does not depend on the state of the child entity.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.DynamicFkWhereClause">
            <summary>
            Dynamic foreign-key WHERE clause provider that can return a result depending on the state of the child entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IFkWhereClauseContext.Entity">
            <summary>
            Child entity of the foreign-key relation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.HierarchyBasedFkWhereClause">
            <summary>
            Restricts a foreign-key relation using a hierarchy-based WHERE clause.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IApiAedsMapping">
            <summary>
            Tracks dependencies between API methods.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IApiBuilder">
            <summary>
            Provides functionality to build an API definition.
            </summary>
            <remarks><para>The following is a list of services which are resolvable during both API initialization
            and API runtime processing.</para>
            <list type="bullet">
            <item><description><see cref="T:QBM.CompositionApi.ApiManager.IApiEventService"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.Definition.IApiAedsMapping"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.Definition.IExtensibilityService"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.ApiManager.IExceptionService"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.Definition.IModifierService"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.ApiManager.IMethodSetProvider"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.ApiManager.IRouteActivator"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.Security.IRouteVerbPermissionProvider"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.ApiManager.IHttpHeaderConfig"/></description></item>
            <item><description><see cref="T:QBM.CompositionApi.Session.ISessionProvider"/></description></item>
            <item><description><see cref="T:Microsoft.Owin.Cors.CorsOptions"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IApiBuilder.AddMethod(QBM.CompositionApi.Definition.IMethod)">
            <summary>
            Adds a new method definition.
            </summary>
            <remarks>Use the factory method <see cref="M:QBM.CompositionApi.Definition.Method.Define(System.String)"/> to create a new method instance.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IApiBuilder.Modify(System.Func{QBM.CompositionApi.Definition.IMethod,System.Boolean},System.Action{QBM.CompositionApi.Definition.IMethod},System.String)">
            <summary>
            Modifies every method that matches the predicate.
            </summary>
            <param name="predicate">If the predicate returns true, the method will be modified.</param>
            <param name="func">Modifier function.</param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IApiBuilder.Resolver">
            <summary>
            Provides access to registered services.
            </summary>
            <remarks>See the <see cref="T:QBM.CompositionApi.Definition.IApiBuilder"/> interface page
            for an list of available services.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IApiCompilationServices">
            <summary>
            Marker interface to represent a resolver that supports API compilation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IApiCompilationServices.IsForHosting">
            <summary>
            Returns a flag indicating whether the environment supports
            hosting an API server. For scenarios involving only compilation and
            validation, this flag is <c>false</c>.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IApiProvider">
            <summary>
            Interface for classes that provide API definitions.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IApiProviderFor`1">
            <summary>
            Marker interface to associate an API builder to an API project, identified by the type <typeparamref name="T"/>.
            </summary>
            <remarks>The API project should use the <see cref="M:QBM.CompositionApi.Definition.ExtensionMethods.FindAttributeBasedApiProviders``1(QBM.CompositionApi.Definition.IExtensibilityService)"/>
            extension method to look up all API providers that implement this interface.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IAsyncEntityColumnModifier.GetAsync(QBM.CompositionApi.DataSources.IPropertyDisplayContext,System.Threading.CancellationToken)">
            <summary>
            Returns the list of column modifiers to apply to the entities.
            </summary>
            <returns>An array of the same length as <see cref="P:QBM.CompositionApi.DataSources.IPropertyDisplayContext.Entities" />.</returns>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IAsyncEntityColumnModifierCollection.Add(QBM.CompositionApi.Definition.IEntityColumnModifier)">
            <summary>
            Adapter method to wrap sync modifiers in a collection of async modifiers.
            </summary>
            <param name="modifier"></param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICalculatedProperties.CalculatedProperties">
            <summary>
            Returns the set of calculated properties that should be exposed to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICalculatedProperties.Modifiers">
            <summary>
            Returns the property modifiers indexed by column name.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ICalculatedProperty">
            <summary>
            Interface for calculated properties.
            </summary>
            <remarks>Calculated properties are used to provide values that do not exist directly in an entity.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICalculatedProperty.ColumnName">
            <summary>
            Name of the column.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICalculatedProperty.ConfigureAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            Configures the property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICalculatedProperty.GetValuesAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the values of this property for the supplied set of entities.
            </summary>
            <remarks>The method <see cref="M:QBM.CompositionApi.Definition.ICalculatedProperty.ConfigureAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)"/> must be called before this method.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICalculatedProperty.PropertyMetaData">
            <summary>
            Returns a property metadata object.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ICandidateConfigService">
            <summary>
            Manages candidate data sources for method parameters.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateConfigService.AddDataSourceTable(QBM.CompositionApi.Definition.IMethod,System.String,System.String)">
            <summary>
            Configures a link between a method parameter and the specified database table.
            </summary>
            <remarks>A global foreign-key candidate route will be configured and declared on the
            candidate data source.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateConfigService.AddDataSourceUrl(QBM.CompositionApi.Definition.IMethod,System.String,System.String)">
            <summary>
            Configures a link between a method parameter and the specified data source URL.
            </summary>
            <remarks>A method with the specified URL must be declared separately. If the specified
            method is not declared, or if it is not a CRUD method, an error will be generated.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateConfigService.AddCandidateParameterConfig(QBM.CompositionApi.Definition.IMethod,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.String})">
            <summary>
            Declares a new parameter configuration.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateConfigService.GetParameterDataSourceConfiguration(QBM.CompositionApi.Definition.IMethod,System.String)">
            <summary>
            Returns the configured configuration for the specified parameter, or <c>null</c> if it has not been declared.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.CandidateConfigService.GlobalParameterConfig">
            <summary>
            Config that accepts all objects from a given table.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ICandidateParameterConfig">
            <summary>
            Configuration of a URL parameter validation
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICandidateParameterConfig.ParameterName">
            <summary>
            Name of the URL parameter
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateParameterConfig.ValidateAsync(QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Validates the parameter value for the given request.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ICandidateParameterConfig.AddTargetUrl(System.String)">
            <summary>
            Adds a new target URL. If the method is not declared, or if it is not a CRUD method,
            an error will be generated.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICandidateParameterConfig.CandidateDataList">
            <summary>
            Returns the list of valid candidate data sources.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IClauseProvider">
            <summary>Clause providers manage the creation of filter clauses for entity requests.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IClauseProvider.GetClausesAsync(QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the clauses to apply to the query.
            </summary>
            <param name="request">The current request.</param>
            <param name="ct">Supports cancellation.</param>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IClientPropertyProvider">
            <summary>
            Declares a client data model.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IClientPropertyProvider.GetClientProperties">
            <summary>
            Returns the client data model.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IClientProperties">
            <summary>
            Represents a client data model.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IColumnSet.ReturnAllColumns">
            <summary>
            When this flag is set, all columns should be considered selected.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IColumnSet.AddDynamicColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers a dynamic set of column names that will be evaluated on every request.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IColumnSet.ValidateAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            Validates the column names in this collection and adds messages to the validation context
            if any errors occur.
            </summary>
            <param name="context">The validation context.</param>
            <param name="ct">Supports cancellation.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IColumnSet.GetColumnsToLoad">
            <summary>
            Returns the effective set of columns to be loaded from the database.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IColumnSet.GetClientColumns">
            <summary>
            Returns the effective set of columns that are part of the client data model.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IColumnSet.AdditionalColumns">
            <summary>
            Returns a set of column names to be loaded from the database which will not be part
            of the client data model.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICompileTimeProperty.ColumnName">
            <summary>
            Returns the name of the property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ICompileTimeProperty.Type">
            <summary>
            Returns the data type.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ICustomEntity">
            <summary>
            Represents a custom entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.GetClausesAsync(QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the filter clauses for the specified request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.WhereClauseProviders">
            <summary>
            Gets the registered WHERE clause providers for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.ClauseProviders">
            <summary>
            Gets the registered filter clause providers for this method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.LoadType">
            <summary>
            Gets or sets the type of entities to load.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.DisableHierarchicalData">
            <summary>
            This setting has no meaning.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.DefaultOrderBy">
            <summary>
            Gets or sets the default <c>ORDER BY</c> clause.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityCollectionReadMethodBase.IsSearchAfterLoad">
            <summary>
            Gets or sets a flag indicating which strategy to apply when using the search index to obtain data.
            </summary>
            <remarks>If the value is <c>false</c>, then the search results are loaded first, and used to filter the database result set.
            If the value is <c>true</c>, then the database result set is loaded first, and the search operates on that result set.
            Set this property to <c>true</c> if the filtered result set can be expected to be much smaller than the total amount of
            rows in the database table.
            If the value is <c>null</c>, the default configuration for the loaded table applies.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IEntityColumnModifier">
            <summary>
            Changes column metadata per entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IEntityColumnModifier.Get(VI.DB.Entities.IEntity)">
            <summary>
            Returns the set of changes to apply to the entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.EntityColumnModifierResult.Apply(QBM.CompositionApi.Definition.EntityColumnModifierResult)">
            <summary>
            Applies the specified modifier to this modifier,
            so that constraints from both modifiers are combined.
            The specified modifier overrides this modifier where applicable.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IEntityReadMethod`1">
            <summary>
            Interface for methods that expose database data to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityReadMethodBase.ResultColumns">
            <summary>
            Returns the set of database columns that should be exposed to the client.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IValidatingMethod.ValidateAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            Validates the method definition, adding messages to the validation context.
            </summary>
            <remarks>This method can be called more than once for any given object. For example,
            it is called once for every method set that the method is assigned to.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityWriteMethod`1.WritableColumns">
            <summary>
            Returns the set of writable columns.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityWriteMethod`1.WriteFilters">
            <summary>
            Returns the set of write filters.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityWriteMethod.WritableColumns">
            <summary>
            Returns the set of writable columns.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IEntityWriteMethod.WriteFilters">
            <summary>
            Returns the set of write filters.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IExtensibilityService">
            <summary>
            The IExtensibilityService provides light-weight access to plug-ins defined in dynamically loaded assemblies.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IExtensibilityService.Add(System.Reflection.Assembly)">
            <summary>
            Tells the service to look for exporting types in the specified assembly.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IExtensibilityService.Get``1">
            <summary>
            Gets all the exports with the specified type parameter.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IGroupDefinitionProvider.Name">
            <summary>
            Returns a technical identifier for this grouping provider.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.Group.Count">
            <summary>
            Number of items in this group.
            </summary>
            <remarks>This property can be optionally set if the count is available during
            group calculation.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IMethod">
            <summary>
            Base interface for API method definitions.
            </summary>
            <remarks>Use the factory method <see cref="M:QBM.CompositionApi.Definition.Method.Define(System.String)"/> to create a new method instance.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethod.Settings">
            <summary>
            Returns the method settings.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethod.RouteProviders">
            <summary>
            Returns the list of providers that define routes for this method.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IMethodSet">
            <summary>
            Base interface for method sets, a.k.a. API projects, a set of
            API methods and common properties.
            </summary>
            <remarks>The <see cref="M:QBM.CompositionApi.Definition.IMethodSet.Configure(VI.Base.IResolve,System.Collections.Generic.IEnumerable{QBM.CompositionApi.Definition.IApiProvider})"/> method must be called to correctly initialize this object.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodSet.Services">
            <summary>
            Provides a set of services specific to this API project.
            </summary>
            <remarks>This property is only available after <see cref="M:QBM.CompositionApi.Definition.IMethodSet.Configure(VI.Base.IResolve,System.Collections.Generic.IEnumerable{QBM.CompositionApi.Definition.IApiProvider})"/> was called.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodSet.AppId">
            <summary>
            Returns the name of the method set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodSet.Methods">
            <summary>
            Returns the set of methods in this method set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodSet.SessionOpened">
            <summary>
            Observable invoked every time a database session is authenticated.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodSet.PlugIns">
            <summary>
            Returns the registered plug-ins for this method set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodValidationContext.MethodSet">
            <summary>
            Returns the associated method set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodValidationContext.Services">
            <summary>
            Returns a service object that is valid for one method validation and route creation phase.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodValidationContext.IsValid">
            <summary>
            Returns a value indicating whether the current method is valid.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodVerb.Description">
            <inheritdoc cref="P:QBM.CompositionApi.ApiManager.IRouteVerb.Description"/>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IMethodVerb.EndpointSecurityIdentifiers">
            <inheritdoc cref="P:QBM.CompositionApi.ApiManager.IRouteVerb.EndpointSecurityIdentifiers"/>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IModifierService">
            <summary>
            Interface to a service that supports metadata modifiers valid for an entire API project.
            </summary>
            <remarks>The modifier service supports different types of modifiers:
            Property modifiers are defined for specific database columns; or for foreign-keyy columns
            which a specific parent table. Entity modifiers are applied for every entity that is
            processed by the API.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IModifierService.GetPropertyModifiers(System.String,System.String)">
            <summary>
            Returns the collection of property modifiers for the specified table and column.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IModifierService.GetFkModifiers(System.String)">
            <summary>
            Returns the collection of foreign-key where clauses for foreign key relations
            pointing to the specified table.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IModifierService.AddEntityModifier(QBM.CompositionApi.Definition.IEntityModifier)">
            <summary>
            Adds a new entity modifier.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IModifierService.GetEntityModifiers">
            <summary>
            Returns the list of entity modifiers.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IModifierService.Modify(QBM.CompositionApi.Handling.IServerProperty)">
            <summary>
            Applies the registered modifiers to the specified property.
            </summary>
            <returns>A server property with applied modifiers</returns>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IModifierService.PropertyConfig">
            <summary>
            Returns an object for configuration-based modification of properties.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IResponseBuilderProvider">
            <summary>
            Provides a set of response builders for a given response context.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IResponseBuilderProvider.GetResponseBuilders(QBM.CompositionApi.Handling.IEntityResponseContext)">
            <summary>
            Returns a list of response builders for the given context.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IRouteProvider">
            <summary>
            Configuration and validation of API routes.
            </summary>
            <remarks>This interface is intended for internal use.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IRouteProvider.CreateRoutesAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <summary>
            Performs validation in the specified context, and adds routes.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ISqlStatementMethod.DefaultOrderBy">
            <summary>
            Gets or sets the default <c>ORDER BY</c> clause.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ITableBasedMethod`1">
            <summary>
            Represents a method handling data from one specific database table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ITableBasedMethodBase.TableName">
            <summary>
            Gets or sets the database table name.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ExtendedTableDescriptor">
            <summary>
            Table descriptor that extends the basic CRUD model with the calculated properties.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ITranslatableStringRegistry.Add(QBM.CompositionApi.Translation.ITranslatableString)">
            <summary>
            Adds a translatable string to the registry. This information can be analyzed
            to obtain strings that require localization.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.IWhereClauseProvider">
            <summary>WHERE clause providers manage the creation of WHERE clauses for entity requests.
            </summary>
            <remarks>Providers are called sequentially. Each provider will
            be called with the result of the previous provider.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IWhereClauseProvider.GetWhereClauseAsync(QBM.CompositionApi.Handling.IRequest,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a WHERE clause.
            </summary>
            <param name="qr">The current request.</param>
            <param name="baseWhereClause">The base WHERE clause, which this provider can modify.</param>
            <param name="ct">Supports cancellation.</param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.IWritableColumnSet.AllColumnsWritable">
            <summary>
            Gets or sets a flag indicating whether all columns should be writable.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.IWritableColumnSet.AddDynamicColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers a dynamic set of column names that will be evaluated on every request.
            </summary>
            <remarks>Disabled columns will automatically be excluded from the result.</remarks>
            <param name="columns"></param>
        </member>
        <member name="T:QBM.CompositionApi.Definition.Method">
            <summary>
            Provides the <see cref="M:QBM.CompositionApi.Definition.Method.Define(System.String)"/> method.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.Method.Define(System.String)">
            <summary>
            Starting point to define a new API method.
            </summary>
            <param name="url">The base URL for the new API method.</param>
        </member>
        <member name="T:QBM.CompositionApi.Definition.MethodSet">
            <summary>
            Default <see cref="T:QBM.CompositionApi.Definition.IMethodSet"/> implementation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.MethodSet.AppId">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.MethodSet.Uid">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.MethodSet.SessionConfig">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.MethodSet.PlugIns">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.MethodSet.SessionOpened">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.Definition.NullBodyType">
            <summary>
            This type is used when a method does not support a request body. Using this type
            will cause the request body to be interpreted as <c>null</c>.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.PathDescriptor">
            <summary>
            HTTP path descriptor
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsRange">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsDynamicFk">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsMultiLine">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.TableName">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.ColumnName">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.Type">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.MinLen">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.MaxLen">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.Format">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.DisplayMl">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.DescriptionMl">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsMultiValued">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.LimitedValues">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.BitMaskCaptions">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.CountDigits">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.ValidReferencedTables">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.DateFormat">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.FkRelation">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsValidColumnForFiltering">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsValidColumnForGrouping">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.IsValidColumnForSorting">
            <inheritdoc />
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.LikeDbTable">
            <summary>
            Gets or sets the name of a related database table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyMetaData.LikeDbColumn">
            <summary>
            Gets or sets the name of a related database column.
            </summary>
            <remarks>The API validator will look for a column of this name in the table <see cref="P:QBM.CompositionApi.Definition.PropertyMetaData.LikeDbTable"/>,
            and copy the column configuration. If this property is <c>null</c>, the API validator will look for
            a column of the same name.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Definition.PropertyModifier.DynamicModifiers">
            <summary>
            Returns a set of modifiers that can change column metadata per entity.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.PropertyModifier.Reset">
            <summary>
            Resets all properties to default values.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.ReportGeneration">
            <summary>
            Represents report generation parameters.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ReportGeneration.ReportName">
            <summary>
            Gets or sets the name of the report.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.ReportGeneration.Parameters">
            <summary>
            Defines the parameter values for the report.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.RequestParameter.IsInQuery">
            <summary>
            Gets or sets a value indicating whether the parameter is part of the URL query or the URL path.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.RequestParameter.HttpVerbs">
            <summary>
            Gets or sets a set of HTTP verbs. If the set is non-empty, then the request parameter
            is only available for these verbs.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.RouteAmbiguityChecker">
            <summary>
            Determines if any routes are ambiguous.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.MethodValidationContext.#ctor(VI.DB.MetaData.IMetaData,QBM.CompositionApi.Definition.IMethod,QBM.CompositionApi.Definition.IMethodSet)">
            <summary>
            For unit tests only
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.WithRoute(QBM.CompositionApi.Definition.IMethod,System.String,System.Int32)">
            <summary>
            Creates a route with the specified suffix, and adds it to the method.
            </summary>
            <param name="method">Base method</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``2(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,``1})">
            <summary>
            Defines a synchronous handler for an HTTP request that returns JSON data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <typeparam name="TResult">Type of data object that will be sent to the client. This type must be serializable to JSON.</typeparam>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Action{``0,QBM.CompositionApi.Handling.IRequest})">
            <summary>
            Defines a synchronous handler for an HTTP request that returns no data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="action">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``2(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            Defines an asynchronous handler for an HTTP request that returns JSON data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <typeparam name="TResult">Type of data object that will be sent as JSON to the client.</typeparam>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{``0,QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Defines an asynchronous handler for an HTTP request that returns no data.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Action{QBM.CompositionApi.Handling.IRequest})">
            <summary>
            Defines a synchronous handler for an HTTP request that expects no input
            and returns no data.
            </summary>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="action">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Defines an asynchronous handler for an HTTP request that expects no input data,
            and returns no data.
            </summary>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,``0})">
            <summary>
            Defines a synchronous handler for an HTTP request that expects no input data
            and returns JSON data.
            </summary>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP request that expects no input data
            and returns JSON data.
            </summary>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as GET, POST, ...)</param>
            <param name="taskFactory">Runs the action.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <summary>
            Defines a generic handler for an HTTP request.
            </summary>
            <typeparam name="TContent">Type of the body data object. This type must be deserializable from JSON input data,
            except when the <see cref="T:QBM.CompositionApi.Definition.NullBodyType"/> is used.</typeparam>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.Handle(QBM.CompositionApi.ApiManager.IMethodRoute,System.String,QBM.CompositionApi.ApiManager.IResponseBuilderSelector)">
            <summary>
            Defines a generic handler for an HTTP request that takes no input data.
            </summary>
            <param name="route">Base route</param>
            <param name="verb">Defines the HTTP method (such as PUT, POST, ...)</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.HandleGet(QBM.CompositionApi.ApiManager.IMethodRoute,QBM.CompositionApi.ApiManager.IResponseBuilderSelector,System.Type)">
            <summary>
            Defines a generic GET handler for an HTTP request.
            </summary>
            <param name="route">Base route</param>
            <param name="selector">Defines an object that manages the type of response to send</param>
            <param name="defaultResultType">Type of data object that will be sent to the client.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.HandleGet``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.Func{QBM.CompositionApi.Handling.IRequest,``0})">
            <summary>
            Defines a synchronous handler for an HTTP GET request that returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="route">Base route</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.HandleGet``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP GET request that returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="route">Base route</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.RouteExtensionMethods.HandleGet``1(QBM.CompositionApi.ApiManager.IMethodRoute,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Defines an asynchronous handler for an HTTP GET request and returns JSON data.
            </summary>
            <typeparam name="T">Type of data object that will be sent to the client.</typeparam>
            <param name="route">Base route</param>
            <param name="taskFactory">Returns the resulting data object.</param>
        </member>
        <member name="P:QBM.CompositionApi.Definition.SqlResultColumn.SetNullForMissing">
            <summary>
            If <c>true</c>, values will be set to <c>null</c> if the column is missing in the
            result.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.SqlResultColumn.LikeDbTable">
            <inheritdoc cref="P:QBM.CompositionApi.Definition.PropertyMetaData.LikeDbTable"/>
        </member>
        <member name="P:QBM.CompositionApi.Definition.SqlResultColumn.LikeDbColumn">
            <inheritdoc cref="P:QBM.CompositionApi.Definition.PropertyMetaData.LikeDbColumn"/>
        </member>
        <member name="M:QBM.CompositionApi.Definition.SqlStatementExtensionMethods.WithResultColumns``1(``0,QBM.CompositionApi.Definition.SqlResultColumn[])">
            <summary>
            Configures the specified database columns to be returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Definition.SqlStatementExtensionMethods.LikeDbTable``1(``0,System.String)">
            <summary>
            Gets or sets the name of a related database table.
            </summary>
            <remarks>The API validator will look for a column of the same name in the table,
            and copy the column configuration.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Definition.SqlStatementMethod.ValidateAsync(QBM.CompositionApi.Definition.IMethodValidationContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:QBM.CompositionApi.Definition.SqlStatementRun">
            <summary>
            Defines a parameterized call to a pre-defined SQL statement.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.SqlStatementRun.AutoPopulateParameters">
            <summary>
            If this flag is set, parameters will automatically be populated
            from the method parameter values (see <see cref="P:QBM.CompositionApi.ApiManager.IMethodSettings.Parameters"/>.
            If this flag is set, the value of <see cref="P:QBM.CompositionApi.Definition.SqlStatementRun.Parameters"/> will be ignored.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Definition.SqlStatementType.SqlExecute">
            <summary>
            SQL query returning a data set.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Definition.SqlStatementType.SqlExecuteNonQuery">
            <summary>
            Non-query command returning the number of affected records.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Definition.SqlStatementType.SqlExecuteScalar">
            <summary>
            SQL query returning a scalar value.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.SqlExecuteNonQueryResult">
            <summary>
            Represents an execution result of a non-query statement.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Definition.SqlExecuteNonQueryResult.RecordsAffected">
            <summary>
            Returns the number of affected records.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.SqlExecuteScalarResult">
            <summary>
            Represents a scalar value.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.TypedEntityMetaData">
            <summary>
            Metadata for the typed entity class (columns and entities)
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ViewConfigExtensions.WithViewConfiguration``1(``0,QBM.CompositionApi.Config.ViewConfig)">
            <summary>
            Uses the specified view configuration for this method.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Definition.ViewConfigExtensions.WithViewConfiguration``1(QBM.CompositionApi.Crud.ICrudMethod{``0},QBM.CompositionApi.Config.ViewConfig)">
            <summary>
            Uses the specified view configuration for this method.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Definition.WhereClauseProviderAdapter">
            <summary>
            Adapter class to integrate legacy IWhereClauseProvider objects with the IClauseProvider interface.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.DependencyInjection.UseTemporaryDirectory(VI.Base.IoC.ContainerBuilder,System.Boolean)">
            <summary>
            Register <see cref="T:QBM.CompositionApi.Loader.ITempDirectory"/> implementation use <paramref name="withSharedWebCache"/> flag
            </summary>
            <param name="withSharedWebCache">If set to <see langword="false"/> a suffix based on <see cref="M:System.IO.Path.GetRandomFileName"/> is added to the <see cref="P:QBM.CompositionApi.Loader.ITempDirectory.Directory"/>. Otherwise suffix is 'html'</param>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModel.Properties">
            <summary>
            Returns information about properties supported by the data source.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelFilter.Delimiter">
            <summary>
            Returns the delimiter string that can be used to join multiple filter values.
            If this is <c>null</c>, filter values are mutually exclusive and cannot be combined.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelFilter.Name">
            <summary>
            Returns the technical identifier for this filter, which is the URL parameter name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelFilter.Description">
            <summary>
            Returns an optional descriptive text for this filter.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelFilterOption.Value">
            <summary>
            Returns the technical value for this option, which is to be used as the value for the <c>def</c> URL parameter.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelViewConfig.AdditionalTableColumns">
            <summary>
            Set of columns that should be added to a table view.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.DataModelViewConfig.AdditionalListColumns">
            <summary>
            Set of columns that should be added to a list view.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityCollectionData.IsLimitReached">
            <summary>
            Gets or sets a flag indicating whether the result is possibly incomplete.
            <remarks>This usually indicates that a search term matched too many results, and the user should try
            using a more narrow search term.</remarks>
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityCollectionData.Hierarchy">
            <summary>
            Returns hierarchical data for data representing a tree structure. If this value is <c>null</c>,
            the data represents a flat list. Otherwise, the data represents one level of a tree, and
            subsequent levels must be queried separately.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityColumnData.DisplayValue">
            <summary>
            Represents a user-friendly display value for the data value.
            </summary>
            <remarks>If this property is <c>null</c>, then the display must be assumed to be equal to the <see cref="P:QBM.CompositionApi.Dto.EntityColumnData.Value"/>.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityWriteData.Reload">
            <summary>
            Gets or sets whether the entities should be reloaded after being committed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityWriteDataColumn.Name">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityWriteDataColumn.Value">
            <summary>
            Gets or sets the new data value.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.EntityWriteDataColumn.OldValue">
            <summary>
            Gets or sets the previous data value.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Dto.ExceptionData">
            <summary>
            DTO for exception data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ExceptionData.Level">
            <summary>
            Gets or sets the exception relevance.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ExceptionData.Message">
            <summary>
            Gets or sets the exception message.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ExceptionData.Number">
            <summary>
            Gets or sets the error number for <see cref="T:VI.Base.ViException"/>-typed exceptions.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Dto.ExtensionMethods.ToEntityDataAsync(VI.DB.Entities.IEntity[],VI.DB.Entities.ISession,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String},QBM.CompositionApi.Definition.IWritableColumnSet,VI.DB.MetaData.IMetaTable,System.Collections.Generic.IDictionary{VI.DB.Entities.IEntity,System.Collections.Generic.IDictionary{System.String,QBM.CompositionApi.Dto.EntityColumnData}},System.Threading.CancellationToken)">
            <summary>Extension method for backwards compatibility.</summary>
            <param name="writableColumns">This parameter is ignored.</param>
        </member>
        <member name="M:QBM.CompositionApi.Dto.ExtensionMethods.ToEntityDataAsync(VI.DB.Entities.IEntity,VI.DB.Entities.ISession,VI.DB.MetaData.IMetaTable,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,QBM.CompositionApi.Dto.EntityColumnData},System.Threading.CancellationToken)">
            <summary>Extension method for backwards compatibility.</summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.ColumnName">
            <summary>
            For comparison filters, sets the comparison column name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.Type">
            <summary>
            Represents the filter type. If this property is not set, the type will be set to Expression if the Expression property
            is set; otherwise, if will be set to Compare.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.CompareOp">
            <summary>
            For comparison filters, sets the comparison operator. Equality comparison will be assumed
            when this property is not set.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.Value1">
            <summary>
            Gets or sets the comparison value.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.Value2">
            <summary>
            Gets or sets the second comparison value for range comparisons.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.Values">
            <summary>
            Gets or sets the value list to compare against a set of values.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.FilterData.Expression">
            <summary>
            Gets or sets the filter expression data.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Dto.FilterType.Compare">
            <summary>
            Compares a value against another value, a range of values, or a set of values.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Dto.FilterType.Search">
            <summary>
            Searches for a term
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Dto.FilterType.Expression">
            <summary>
            Uses a filter expression tree
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.GroupInfoData.TotalCount">
            <summary>
            Returns the total number of groups.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.GroupInfo.Count">
            <summary>
            Returns the number of elements in this group.
            </summary>
            <remarks>This property is <c>null</c> unless the <see cref="F:QBM.CompositionApi.Definition.Constants.WithCountParameterName"/> query parameter
            was set to <c>true</c>.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Dto.GroupDisplay.Parameters">
            <summary>
            Parameter values for placeholders in the <see cref="P:QBM.CompositionApi.Dto.GroupDisplay.Display"/> string.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.HierarchyData.EntitiesWithHierarchy">
            <summary>
            Gets the keys of the entities that are a parent of other entities.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Dto.IClientProperty">
            <summary>
            Represents a property in the client data model.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.ColumnName">
            <summary>
            Returns the name of the property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.Type">
            <summary>
            Returns the data type.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.IsReadOnly">
            <summary>
            Returns a flag indicating whether the property is read-only in this context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.IsCrypted">
            <summary>
            Returns a value indicating whether property values are encrypted.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.IsRange">
            <summary>
            Returns a value indicating whether values are to be interpreted as a value range according
            to <see cref="T:VI.Base.ValueRange"/>.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.IsDynamicFk">
            <summary>
            Returns a value indicating whether values can be interpreted as dynamic foreign keys
            in the <see cref="T:VI.DB.DbObjectKey"/> format.
            </summary>
            <remarks>If this property is <c>true</c>, the property <see cref="P:QBM.CompositionApi.Dto.IClientProperty.ValidReferencedTables"/>
            may provide information about referenceable tables.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.Display">
            <summary>
            Returns a display name for this property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.Description">
            <summary>
            Returns a descriptive text for this property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.BitMaskCaptions">
            <summary>
            Returns display names for the bits in a bit mask.
            </summary>
            <remarks>If this property is not <c>null</c>, property values should be interpreted as bit masks.
            This is only valid for properties of type <see cref="F:VI.Base.ValType.Int"/>.</remarks>
            <seealso cref="T:VI.Base.BitMask"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.IClientProperty.ValidReferencedTables">
            <summary>
            Returns a list of referenceable tables by a dynamic foreign key.
            </summary>
            <remarks>If this property is <c>null</c>, all tables are valid reference targets.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityData.State">
            <summary>
            Represents the current state of the entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityData.EntityId">
            <summary>
            Gets or sets the unique identifier of this entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityDeleteData.State">
            <summary>
            Represents the previous operations performed on this entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityDeleteData.EntityId">
            <summary>
            Gets or sets the unique identifier of this entity.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Dto.InteractiveEntityStateData">
            <summary>
            Represents the data required to represent and recreate the state of an interactive entity (+ wrapped data).
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityStateData.State">
            <summary>
            Represents the previous operations performed on this entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityWriteData.Commit">
            <summary>
            Gets or sets a flag indicating whether the changes should be committed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityWriteData.Reload">
            <summary>
            Gets or sets a flag indicating whether entity should be reloaded after commit.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityWriteData.State">
            <summary>
            Represents the previous operations performed on this entity.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.InteractiveEntityWriteData.EntityId">
            <summary>
            Gets or sets the unique identifier of this entity.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Dto.MultiLanguageStringData">
            <summary>
            Represents a translatable string.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.MultiLanguageStringData.Key">
            <summary>
            Gets or sets the key for the translation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.MultiLanguageStringData.UidColumn">
            <summary>
            Gets or sets the UID of the database translation column.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.ChangeTime">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.ChangeTime"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.ChangeTypeId">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.ChangeType"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.ChangeType">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.ChangeTypeDisplay"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.Display">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.Display"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.IsRemoveEvent">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.IsRemoveEvent"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.LongDisplay">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.LongDisplay"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.OldValue">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.OldValue"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.Property">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.Property"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.ObjectHistoryEvent.User">
            <inheritdoc cref="P:QBM.CompositionApi.History.IHistoryEvent.User"/>
        </member>
        <member name="P:QBM.CompositionApi.Dto.UserDataModelViewConfig.Default">
            <summary>
            Gets or sets the ID of the user's default view configuration.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.SessionInfoData.AuthenticatedBy">
            <summary>
            Name of the authentication module
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.SessionInfoData.DialogUserUid">
            <summary>
            Unique system user identifier
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.SessionInfoData.CultureFormat">
            <summary>
            Formatting language
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Dto.SessionInfoData.CultureUi">
            <summary>
            User interface language
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.ExtensionMethods.WithParameterExtendedData``1(``0,System.Boolean)">
            <summary>
            Configures the CRUD model to use a <see cref="T:QBM.CompositionApi.ExtendedData.ParameterProvider"/>. This method
            only supports parameter sets that have already been created.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.ExtensionMethods.WithParameterExtendedData``1(``0,System.String)">
            <summary>
            Configures the CRUD model to use a <see cref="T:QBM.CompositionApi.ExtendedData.ParameterProvider"/>. This method
            supports creation of new parameter sets, where the supplied column name points to
            the owner of the parent parameter set.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IExtendedData`2">
            <summary>
            Represents an extended data object.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ExtendedData.IExtendedData.Object">
            <summary>
            Returns the raw extended data object.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.IExtendedData.ApplyAsync(QBM.CompositionApi.Handling.IRequest,System.Object,System.Threading.CancellationToken)">
            <summary>
            Applies the new parameter object.
            </summary>
            <param name="val">Parameter object supplied by the client; may be <c>null</c> if the client did not specify a value.</param>
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IReadExtendedData`1">
            <summary>
            Represents an extended data object.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IReadOnlyExtendedDataProvider`1">
            <typeparam name="T">data type for the read extended data object (value emitted to the client)</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.IReadOnlyExtendedDataProvider`1.GetExtendedDataAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the extended data object for the supplied list of entities.
            </summary>
            <remarks>The result must be of the type defined by <typeparamref name="T"></typeparamref></remarks>.
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IReadWriteExtendedDataProvider`2">
            <typeparam name="TRead">data type for the read extended data object (value emitted to the client)</typeparam>
            <typeparam name="TWrite">data type for the write extended data object (value submitted by the client)</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.IReadWriteExtendedDataProvider`2.GetExtendedDataAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the extended data object for the supplied list of entities.
            </summary>
            <remarks>The result must be of the type defined by <typeparamref name="TRead"></typeparamref></remarks>.
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IWriteExtendedData`1">
            <summary>
            Represents an extended data object.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.IWriteExtendedData`1.ApplyAsync(QBM.CompositionApi.Handling.IRequest,`0,System.Threading.CancellationToken)">
            <summary>
            Applies the new parameter object.
            </summary>
            <param name="val">Parameter object supplied by the client, or <c>null</c> if the client did not specify a value.</param>
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.IWriteOnlyExtendedDataProvider`1">
            <typeparam name="T">data type for the write extended data object (value submitted by the client)</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.ExtendedData.IWriteOnlyExtendedDataProvider`1.GetExtendedDataAsync(System.Collections.Generic.IReadOnlyList{VI.DB.Entities.IEntity},QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the extended data object for the supplied list of entities.
            </summary>
            <remarks>The result must be of the type defined by <typeparamref name="T"></typeparamref></remarks>.
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.ParameterProvider">
            <summary>
            Support for <c>DialogParameter</c> objects.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ExtendedData.ParameterProvider.IsReadOnly">
            <summary>
            Gets or sets a flag indicating whether parameters obtained through this provider are read-only.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.ExtendedData.TranslationExtendedDataProvider">
            <summary>
            ExtendedDataProvider that provides read/write functionality for all translatable properties and for
            all active languages.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ExtendedData.TranslationDataRead.Translations">
            <summary>
            Translations currently available, indexed by column name.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ExtendedData.TranslationDataRead.Languages">
            <summary>
            Languages suitable for translation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ExtendedData.TranslationDataRead.ColumnNames">
            <summary>
            Names of the columns which can be translated.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.ExtensionMethods.AddClauses(VI.DB.Entities.ISelect,System.Collections.Generic.IEnumerable{VI.DB.Entities.Clause})">
            <summary>
            Applies the clauses to the specified base query.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.CalculatedPropertyEval">
            <summary>
            Manages evaluation of a set of calculated properties for a set of entities.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.CultureAwareContent">
            <summary>
            ObjectContent implementation that applies the current culture settings during serialization
            of the content object, when serialization happens on a different call context.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.CultureAwareContent`1">
            <inheritdoc cref="T:QBM.CompositionApi.Handling.CultureAwareContent"/>
        </member>
        <member name="T:QBM.CompositionApi.Handling.EntityStoreByMethod">
            <summary>
            Stores interactive entities by method and with an access timestamp.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.EventStream.EntityCollectionChangeData.New">
            <summary>
            Returns entities being added to the collection.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.EventStream.EntityCollectionChangeData.Updates">
            <summary>
            Returns update information for existing entities.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.EventStream.EntityCollectionChangeData.Deletions">
            <summary>
            Returns keys for entities that were deleted from the collection.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.ExtendedMetaData">
            <summary>
            IMetaData implementation that supports additional properties.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.ExtensionMethods.IsSecureOrForwarded(Microsoft.Owin.IOwinRequest)">
            <summary>
            Returns a flag indicating if the <see cref="P:Microsoft.Owin.IOwinRequest.IsSecure" /> property is set,
            or if the <c>X-Forwarded-Proto</c> header indicates that the connection is secure
            from the client's perspective.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.FileStorageMethod.IsReadOnly">
            <summary>
            If this flag is set, only GET routes will be generated.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.FileStorageRouteProvider.IsReadOnly">
            <summary>
            If this flag is set, only GET routes will be generated.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.FkCandidateRouteType">
            <summary>
            Represents the type of candidate route for a property.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Handling.FkCandidateRouteType.StaticPerMethod">
            <summary>
            The route is method-specific, but independent from the base entity.
            </summary>
            <remarks>The candidate route is a method-specific GET route.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.Handling.FkCandidateRouteType.StaticGlobal">
            <summary>
            The route is independent from the method and from the base entity.
            </summary>
            <remarks>The candidate route is a global GET route.</remarks>
        </member>
        <member name="F:QBM.CompositionApi.Handling.FkCandidateRouteType.Dynamic">
            <summary>
            The route is method-specific, and the results depend on the state of the base entity.
            </summary>
            <remarks>The candidate route is a method-specific POST route.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContext`1.Entities">
            <summary>
            Returns the entities being processed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContext.Entities">
            <summary>
            Returns the entities being processed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContextBase.Request">
            <summary>
            Returns the current request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContextBase.UnitOfWork">
            <summary>
            If the entity is being committed, this property contains the unit of work.
            </summary>
            <remarks>Do not commit the entity returned by the <see cref="T:VI.DB.Entities.Entity"/> property. Use
            this unit of work only to commit additional entities that you created.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContextBase.ExtendedData">
            <summary>
            Extended data object.
            </summary>
            <remarks>This property is only available in the <c>BeforeSave</c>, <c>BeforeSaveExtendedData</c> and <c>AfterSave</c> phases.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.ICrudEventSource.ProcessingEvent">
            <summary>
            Event source for entity processing events.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.IEntityCollectionRequest`1">
            <summary>
            Encapsulates the settings for a specific entity collection request.
            </summary>
            <remarks>The settings are initially populated from the method definition, but
            can be changed. All changes affect only the current request.</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Handling.IEntityCollectionRequest">
            <summary>
            <inheritdoc cref="T:QBM.CompositionApi.Handling.IEntityCollectionRequest`1"/>
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityCollectionRequest.FilterClauses">
            <summary>
            Returns the list of filter clauses for this request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityCollectionRequest.IsSearchAfterLoad">
            <summary>
            Gets or sets flag managing the search strategy.
            </summary>
            <remarks>By default, the search index will be queried first. If this flag
            is <c>true</c>, the entities will be loaded first, and the search index will
            be queried using the set of loaded entities.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityCollectionRequest.SearchMode">
            <summary>
            Gets or sets flag managing the search strategy.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityCollectionRequest.DataParameters">
            <summary>
            Returns the list of data parameters to use in the SQL statement.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityCollectionRequest.ExtendedProperties">
            <summary>
            Returns custom properties containing data specific to this request.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.EntityCollectionRequest.DataSourceWrapper">
            <summary>
            Wrapper for an IDataSource with extra flags
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.IEntityProcessingContext`1">
            <summary>
            Represents a single-entity processing context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext`1.Entity">
            <summary>
            Returns the entity being processed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext.Entity">
            <summary>
            Returns the entity being processed.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext.Request">
            <summary>
            Returns the current request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext.UnitOfWork">
            <summary>
            If the entity is being committed, this property contains the unit of work.
            </summary>
            <remarks>Do not commit the entity returned by the <see cref="P:QBM.CompositionApi.Handling.IEntityProcessingContext.Entity"/> property. Use
            this unit of work only to commit additional entities that you created.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext.Operation">
            <summary>
            Returns the current type of operation.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IEntityProcessingContext.ExtendedData">
            <inheritdoc cref="P:QBM.CompositionApi.Handling.IBulkEntityProcessingContextBase.ExtendedData"/>
        </member>
        <member name="F:QBM.CompositionApi.Handling.EntityProcessingType.BeforeSave">
            <summary>
            Raised after the entites have been modified, but before the changes are committed.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Handling.EntityProcessingType.BeforeSaveExtendedData">
            <summary>
            Raised before the <see cref="M:QBM.CompositionApi.ExtendedData.IExtendedData.CommitAsync(VI.DB.Entities.IUnitOfWork,System.Threading.CancellationToken)"/> method is called, but before the
            entities are committed.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.IEntityResponseContext">
            <summary>
            Represents a response context for entity data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IExceptionTransformService.MessageBuilder">
            <summary>
            Gets or sets the message builder for exceptions.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.IExceptionMessageBuilder">
            <summary>
            A message builder responsible for creating exception messages.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IExceptionMessageBuilder.ExceptionDataType">
            <summary>
            Gets the data type for exception data.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.IExceptionMessageBuilder.BuildMessage(QBM.CompositionApi.Handling.IRequest,System.Exception)">
            <summary>
            Returns a new HTTP response message to return to the client.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.ExceptionTransform.Transform(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns the serialized representation of the exception data to send
            to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IJsonConfigService.SerializationFormatter">
            <summary>
            Gets or sets the formatter used for serialization.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IJsonConfigService.DeserializationFormatter">
            <summary>
            Gets or sets the formatter used for deserialization.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.ImagePropertyProcessor">
            <summary>
            The image property processor can be registered on an API method to enforce
            an image constraint on a property containing image data.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.InMemorySorting">
            <summary>
            Implements a two-pass post-load processor. First, all entities are loaded without any extra columns
            that could be expensive. In the first processing step, all entities are sorted according to the sorting rule
            and paged. The remaining entities are loaded again, this time with all required columns, and then re-sorted
            in the second pass.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy">
            <summary>
            Represents a column sorting.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.#ctor(VI.DB.MetaData.IMetaColumn,VI.DB.Entities.ISession)">
            <summary>
            Creates a new <c>ColumnOrderBy</c> for the given column.
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.IsDescending">
            <summary>
            Gets or sets a flag indicating whether descending sort will be used.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.SortColumn">
            <summary>
            Returns the column which is used for sorting.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.Compare(System.IComparable,System.IComparable)">
            <inheritdoc />
        </member>
        <member name="M:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.GetSortValue(VI.DB.Entities.IEntity)">
            <summary>
            Returns this column's value for the supplied entity as a comparable value.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.InMemorySorting.ColumnOrderBy.Sort(System.Collections.Generic.IEnumerable{VI.DB.Entities.IEntity})">
            <summary>
            Sorts the input data row list according to this object's settings.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Handling.Interactive.ClaimTypes.Changes">
            <summary>
            Refers to a <see cref="T:QBM.CompositionApi.Handling.Interactive.Changes"/> object.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.IReportRequestConfigurator.BuildReportResponseAsync(QBM.CompositionApi.Handling.IRequest,QBM.CompositionApi.Handling.IReportResponseData,System.Threading.CancellationToken)">
            <summary>
            Builds the report response.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.IReportRequestConfigurator.GetResponseType(QBM.CompositionApi.Handling.IRequest)">
            <summary>
            Returns the preferred response type for the report request, or <c>null</c> if the client has no preference.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.Session">
            <summary>
            Returns the associated database session.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.MethodSet">
            <summary>
            Returns the method set through which the method was called.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.Route">
            <summary>
            Returns the called route.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.Content">
            <summary>
            Returns the content of the request body.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.HttpMethod">
            <summary>
            Returns the used HTTP method.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.Request">
            <summary>
            Returns the web request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IRequest.Resolver">
            <summary>
            Returns a service resolver.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.TableName">
            <summary>
            Returns the TableName of the property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.ColumnName">
            <summary>
            Returns the name of the property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.Type">
            <summary>
            Returns the data type.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsReadOnly">
            <summary>
            Returns a flag indicating whether the property is read-only in this context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsCrypted">
            <summary>
            Returns a value indicating whether property values are encrypted.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsMAllKeyMember">
            <inheritdoc cref="P:VI.DB.MetaData.IMetaColumn.IsMAllKeyMember"/>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsRange">
            <summary>
            Returns a value indicating whether values are to be interpreted as a value range according
            to <see cref="T:VI.Base.ValueRange"/>.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsDynamicFk">
            <summary>
            Returns a value indicating whether values can be interpreted as dynamic foreign keys
            in the <see cref="T:VI.DB.DbObjectKey"/> format.
            </summary>
            <remarks>If this property is <c>true</c>, the property <see cref="P:QBM.CompositionApi.Handling.IServerProperty.ValidReferencedTables"/>
            may provide information about referenceable tables.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.DisplayMl">
            <summary>
            Returns a display name for this property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.DescriptionMl">
            <summary>
            Returns a descriptive text for this property.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.BitMaskCaptions">
            <summary>
            Returns display names for the bits in a bit mask.
            </summary>
            <remarks>If this property is not <c>null</c>, property values should be interpreted as bit masks.
            This is only valid for properties of type <see cref="F:VI.Base.ValType.Int"/>.</remarks>
            <seealso cref="T:VI.Base.BitMask"/>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.ValidReferencedTables">
            <summary>
            Returns a list of referenceable tables by a dynamic foreign key.
            </summary>
            <remarks>If this property is <c>null</c>, all tables are valid reference targets.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsValidColumnForFiltering">
            <summary>
            Returns a flag indicating whether the property supports sorting or not.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsValidColumnForGrouping">
            <summary>
            Returns a flag indicating whether the property supports grouping or not.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.IServerProperty.IsValidColumnForSorting">
            <summary>
            Returns a flag indicating whether the property supports filtering or not.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.KeyBasedRoute">
            <summary>
            Information about the route that contains all primary keys for an entity, allowing
            a single entity to be addressed with the URL path alone.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.KeyBasedRoute.PathPkParameters">
            <summary>
            Names of the primary key parameters, in the order in which they appear in the path.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.KeyBasedRoute.AdditionalPathPkParameters">
            <summary>
            Names of the appended primary key parameters, which are not part of the base method route,
            in the order in which they appear in the path.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.ModifiedEntityBuilder.Modifiers">
            <summary>
            Only set this property when the <see cref="P:QBM.CompositionApi.Handling.ModifiedEntityBuilder.Crud"/> property is null.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.ModifiedProperty">
            <summary>
            Modifies properties of an existing server property.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.ModifiedProperty.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns the intersection of the two collections, using the display values from <paramref name="coll2"/>.
            </summary>
            <remarks>If either collection is <c>null</c>, the other collection is returned.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Handling.QueryRequest.Resolver">
            <summary>
            Returns a service resolver. See the
            <see cref="T:QBM.CompositionApi.Definition.IApiBuilder" /> for an overview of available services.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.TablePermissionCheck">
            <summary>
            Represents a table permission check.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.TablePermissionCheck.CanSeeRequired">
            <summary>
            Gets or sets a flag indicating whether read permissions are required on the table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.TablePermissionCheck.CanEditRequired">
            <summary>
            Gets or sets a flag indicating whether edit permissions are required on the table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.TablePermissionCheck.CanDeleteRequired">
            <summary>
            Gets or sets a flag indicating whether delete permissions are required on the table.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.TablePermissionCheck.CanInsertRequired">
            <summary>
            Gets or sets a flag indicating whether delete permissions are required on the table.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.TypeWrappingEntityProcessingContext`1">
            <summary>
            Adapter class to provide type-safe entity processing events.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:QBM.CompositionApi.Handling.ValueConstraint">
            <summary>
            Represents a constraint on the data value.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.ValueConstraint.MinValue">
            <summary>
            Gets or sets an optional minimum value.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Handling.ValueConstraint.MaxValue">
            <summary>
            Gets or sets an optional maximum value.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Handling.ValueConstraint.Apply(QBM.CompositionApi.Handling.ValueConstraint)">
            <summary>
            Applies the specified constraints to this constraint,
            so that both constraints are combined.
            The specified constraint overrides this constraint where applicable.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Handling.WriteBulkRouteProvider">
            <summary>
            Provides a PUT endpoint for bulk updates.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.History.CombinedCriteriaProvider.DefaultCriterion">
            <summary>
            Default criterion that will be used if none of the providers define any criterion.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.History.HistoryExtensionMethods.WithResultColumns``1(``0,System.String[])">
            <summary>
            Configures the specified properties  to be returned in the result.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.History.HistoryExtensionMethods.GetDataAsync(QBM.CompositionApi.History.IHistoryMethod,QBM.CompositionApi.Handling.IRequest,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns the history data for this method, as if there had been a request.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.History.HistoryExtensionMethods.GetEntitiesAsync(QBM.CompositionApi.History.IHistoryMethod,QBM.CompositionApi.Handling.IRequest,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Returns the history entities for this method, as if there had been a request.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Loader.BaseFileLoader`1.ProbeRelativeDirectories">
            <summary>
            Returns a list of subdirectories that will be probed when trying to load a specific file.
            </summary>
            <remarks>These directories will be probed in order for a file. The main directory will be probed last.
            These directories must be direct sub directories of the <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.WorkingDirectory"/></remarks>.
        </member>
        <member name="P:QBM.CompositionApi.Loader.BaseFileLoader`1.WorkingDirectory">
            <summary>
            Returns the base working directory path.
            </summary>
            <remarks>This is the base directory all opertions are work on.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Loader.BaseFileLoader`1.GetFiles">
            <summary>
            Returns all file names, mapped to the directory in which they are first found.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Loader.BaseFileLoader`1.TryLoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Search the file within <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.WorkingDirectory"/> and all <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.ProbeRelativeDirectories"/> sub directories and load as <typeparamref name="T"/> if found.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Loader.ZipFileStreamLoader.TryLoadExplicitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Search the file within <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.WorkingDirectory"/> and all <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.ProbeRelativeDirectories"/> sub directories.
            If file not found in direct folders, a search in all directories under <see cref="P:QBM.CompositionApi.Loader.BaseFileLoader`1.WorkingDirectory"/> reuns as fallback and load as <see cref="T:System.IO.Stream"/> if found.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.NodeDev.DbAppInfoProvider">
            <summary>
            Service class to lookup information about the html apps present in the database.
            <para>
            The base information is queried from the <c>QBMHtmlApp</c> database table.
            </para>
            <para>
            A crucial information about an app is its name. Because that name is not stored in <c>QBMHtmlApp</c>
            it will be retrieved from the package.json file for the application.
            That file should be stored in the database table <c>QBMFileRevision</c> with a
            <c>QBMFileRevision.FileName</c> value of package.json prefixed by the path of the
            application which is stored in the column <c>QBMHtmlApp.Path</c>.
            </para>
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.NodeDev.DbAppInfoProvider.FileInfoProvider">
            <summary>
            Service class object to lookup information about the html apps, plugins or themes present on host.
            </summary>
            <remarks>
            Even though the app infos are retrieved from the database, plugin declaration
            must be present in a local file.
            </remarks>
        </member>
        <member name="T:QBM.CompositionApi.NodeDev.IAppInfoProvider">
            <summary>
            Returns information about NodeJS applications declared in the system.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.NodeDev.NodeAppInfo.Name">
            <summary>
            Name of the Node package.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.NodeDev.NodeAppInfo.DisplayName">
            <summary>
            Display name of the application.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.NodeDev.NodeAppInfo.Description">
            <summary>
            Descriptive text for the application.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.NodeDev.NodeAppInfo.PlugIns">
            <summary>
            Returns the list of available plug-in libraries for this application.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.NodeDev.PreCompiledAppLoader">
            <summary>
            Loads files for pre-compiled apps, and dynamic assemblies for other apps.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.NodeDev.StaticContentFileInfoProvider.LoadImxConfigInfos``1(System.String)">
            <summary>
            Load infos from imx-*-config.json files located in IImxDirectory
            </summary>
            <typeparam name="T">The result type parsed from json files</typeparam>
            <param name="configFilePattern">The file name pattern to look for</param>
        </member>
        <member name="P:QBM.CompositionApi.Operations.HistoryOperationsData.BackTo">
            <summary>
            Changes before this date are included.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Operations.HistoryOperationsData.BackFrom">
            <summary>
            Changes after this date are included.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Operations.HistoryOperationsData.EventsIncluded">
            <summary>
            The number of events in this response.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Operations.HistoryOperationsData.EventsTotal">
            <summary>
            The number of total events available for the requested filter.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Operations.JobChainGroupDefinitionProvider">
            <summary>
            Provides efficient grouping by process (JobChain).
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Performance.IPerfLogBuffer">
            <summary>
            Memory buffer for the most recently measured performance data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Performance.IPerfLogBuffer.MaxSize">
            <summary>
            Gets or sets the number of measurement points to keep.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Performance.IPerfLogService">
            <summary>
            Service to record API server performance data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Performance.IPerfLogService.Disabled">
            <summary>
            Disables performance log data generation.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.CulturePlugIn">
            <summary>
            Server plugin to set the correct culture for the current request.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.DocPlugin">
            <summary>
            Server plugin to provide HTML5 documentation to the client.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.HtmlAppPlugin">
            <summary>
            Server plugin to deliver HTML application files to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.PlugIns.LoadedPlugin.Exception">
            <summary> 
            If defined, the plugin failed while loading with the given exception.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.IUpdateHandler">
            <summary>
            Interface for software update handlers.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.PlugIns.IUpdateHandler.IsWaitingToStartUpdate">
            <summary>
            Returns a flag indicating whether an update process will begin soon, meaning that
            the service may become unavailable.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.PlugIns.IUpdateHandler.GetUpdaterStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a value indicating whether software updates are available.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.PlugIns.IUpdateHandler.CanStartUpdaterAsync(VI.DB.Entities.ISession,System.Threading.CancellationToken)">
            <summary>
            Returns a value indicating whether software updates may be manually started.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.PlugIns.IUpdaterInfo.StartUpdate(System.Func{System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Starts the software update.
            </summary>
            <param name="canStartUpdater">Function returning a value indicating whether the update process may be started.</param>
            <returns>A flag indicating whether the update was started successfully.</returns>
        </member>
        <member name="P:QBM.CompositionApi.PlugIns.IUpdaterInfo.HasStarted">
            <summary>
            Returns a flag indicating whether the update process has been started.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.NoUpdateHandler">
            <summary>
            Implementation of <see cref="T:QBM.CompositionApi.PlugIns.IUpdateHandler"/> interface that does not perform any software updates.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.OwinRequestScopePlugin">
            <summary>
            Middleware to provides the current Owin request as part of the logical call context.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.PerformanceCounters">
            <summary>
            Exposes engine metrics as performance counters.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.ServerPluginService">
            <summary>
            This class provides the base functionality to extend the server through plug-ins.
            </summary>
            <remarks>
            <para>This class loads all DLL files in the application folder which match the <c>*.CompositionApi.Server.dll</c> pattern.</para>
            </remarks>
        </member>
        <member name="M:QBM.CompositionApi.PlugIns.ServerPluginService.Get``1">
            <summary>
            Returns all implementations for the provided type.
            </summary>
            <typeparam name="T">The export type to be obtained.</typeparam>
        </member>
        <member name="M:QBM.CompositionApi.PlugIns.ServerPluginService.ForceExports``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            For mocking purposes, use this method to force the server to use a defined set of exports.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.PlugIns.UpdaterState">
            <summary>
            Represents the software update state.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.PlugIns.UpdaterState.UpdatesAvailable">
            <summary>
            Updates are available.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.PlugIns.UpdaterState.NoUpdatesAvailable">
            <summary>
            No updates are available, or the check failed.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.PlugIns.UpdaterState.AlreadyRunning">
            <summary>
            The updater is already running.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.PlugIns.UpdaterState.Disabled">
            <summary>
            Updates are disabled either for this application or globally.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.ProfilSettings.GenericProfileSettingsApi`2.ProfileSettingsDto.ProfileLanguage">
            <summary>
            Preferred language from the user's profile. This property is read-only.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Security.AdaptiveSecondFactorAuth">
            <summary>
            Adaptive authentication that requires a second factor depending on conditions
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Security.IRequestPermission">
            <summary>
            Represents a permission object.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Security.IRequestPermission.IsAllowedAsync(QBM.CompositionApi.Handling.IRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a flag indicating whether the action is allowed.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Security.IRouteVerbPermissionProvider">
            <summary>
            Manages permissions by route verbs.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Security.IRouteVerbPermissionProvider.Register(System.String,System.String,System.String,QBM.CompositionApi.Security.IRequestPermission)">
            <summary>
            Register a new permission for the specified verb. If a permissions was previously registered for
            the same verb, all permissions are required to be met.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Security.IRouteVerbPermissionProvider.GetPermission(System.String,System.String,System.String)">
            <summary>
            Returns the permission for the specified verb.
            </summary>
            <returns>The registered permission, or an invariant permission if none was registered.</returns>
        </member>
        <member name="T:QBM.CompositionApi.Session.AuthStatus">
            <summary>
            Represents the authentication status of a session.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.PrimaryAuth">
            <summary>
            Returns the primary (database) authentication status.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.SecondaryAuth">
            <summary>
            Returns the authentication status for the second factor.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.AuthValidUntil">
            <summary>
            Returns the expiration date for the current authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.ExternalLogoutUrl">
            <summary>
            Returns a URL to use for logging out from an external authentication provider.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.Culture">
            <summary>
            Returns the currently active culture for interface strings.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.AuthStatus.CultureFormat">
            <summary>
            Returns the currently active culture for value formatting.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.IAuthenticatorCache.GetAuthentifierConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns configuration data for the specified authentication module.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.IAuthenticatorCache.GetWebAppConfigAsync(System.Threading.CancellationToken)">
            <summary>
            Returns configuration data for the current application.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.IClientData.GetData(System.String)">
            <summary>
            Returns a string stored in the client data.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:QBM.CompositionApi.Session.IClientData.SetData(System.String,System.String,QBM.CompositionApi.Session.CookieOptions)">
            <summary>
            Adds the string to the client data. 
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ClientDataExtensionMethods.GetDataEncoded``1(QBM.CompositionApi.Session.IClientData,System.String)">
            <summary>
            Decodes an object stored in the client data.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ClientDataExtensionMethods.SetDataEncoded``1(QBM.CompositionApi.Session.IClientData,System.String,``0,QBM.CompositionApi.Session.CookieOptions)">
            <summary>
            Encodes the object and adds it to the client data.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Session.IServerSessionService">
            <summary>
            Represents server-side session state, which is stored on the server-side and
            inaccessible from the client.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.IServerSession.GetData(System.String)">
            <summary>
            Returns a string stored in the session data.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:QBM.CompositionApi.Session.IServerSession.SetData(System.String,System.String)">
            <summary>
            Adds the string to the session data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.IServerSession.HasChanges">
            <summary>
            Returns a flag indicating if there are any uncommitted changes.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthDb.AuthTime">
            <summary>
            Returns the time of the authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthDbConfig.SsoAuthentifiers">
            <summary>
            Gets the list of valid authentifiers for SSO authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthDbConfig.ManualAuthentifiers">
            <summary>
            Gets the list of valid authentifiers for manual authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthDbConfig.AllowPersistentAuth">
            <summary>
            Returns a value indicating whether the authentication may be persisted
            (i.e as a persistent non-session cookie) on the client.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Session.ISessionAuthOption">
            <summary>
            Represents information about an authentication option.
            </summary>
            <remarks>An authentication option exposes an authentication module in a reconfigurable way.
            Its display name can be configured, and authentication properties can be hidden or set to
            a pre-defined value.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthOption.Id">
            <summary>
            Returns the identifier of this authentication option. This identifier must be unique across
            all available authentication modules and options.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ISessionAuthOption.GetAuthModuleAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the authentication module, or <c>null</c> if it is not enabled.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthOption.ThrowOnFailure">
            <summary>
            If this flag is set, an exception during an authentication attempt will be thrown
            also for FixedCredentials and single-sign-on authentications, instead of continuing
            trying with the next authentication provider.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ISessionAuthOption.Authenticate(VI.DB.IConnection,VI.DB.Auth.IAuthProps)">
            <summary>
            Authenticates the connection using the supplied authentication properties.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ISessionAuthProvider.GetManualAuthOptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the list of authentication options defined by this provider.
            </summary>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="T:QBM.CompositionApi.Session.DefaultAuthProvider">
            <summary>
            Default authentication provider using credentials supplied by the client or single-sign-on.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthSecondary.IsEnabled">
            <summary>
            Returns a flag indicating if this second-factor authentication is enabled.
            </summary>
            <remarks>If the value is <c>false</c>, second-factor authentication is not required.</remarks>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthSecondary.Name">
            <summary>
            Identifies this type of second-factor authentication to the client.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionAuthSecondary.ErrorMessage">
            <summary>
            If any errors occurred during second-factor authentication, this property
            returns the error message.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Session.ISessionGroup">
            <summary>
            Represents information about sessions for every API project.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionGroup.XsrfToken">
            <summary>
            Returns the XSRF protection token that must be supplied by the client on every request.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ISessionStatus.GetSessionAsync(System.Collections.Generic.IDictionary{System.String,System.String},QBM.CompositionApi.Session.ILoginEnvironment,System.Threading.CancellationToken)">
            <summary>
            Returns a database session.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionStatus.CultureUi">
            <summary>
            Culture identifier for the interface culture.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionStatus.CultureFormat">
            <summary>
            Culture identifier for the value formatting culture.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.ISessionStatus.AuthValidUntil">
            <summary>
            Returns the expiration date for the current authentication.
            </summary>
        </member>
        <member name="F:QBM.CompositionApi.Session.OAuth2SessionGroupProvider.OAuthSessionGroupKey">
            <summary>
            This key is set on the Owin environment when the Authorization header
            was detected and used for authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.PrimaryAuthStatus.Display">
            <summary>
            Returns the display name of the authenticated user.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.PrimaryAuthStatus.Uid">
            <summary>
            Returns the unique identifier of the associated identity, if any.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.PrimaryAuthStatus.AuthTime">
            <summary>
            Returns the time of the authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SecondaryAuthStatus.IsAuthenticated">
            <summary>
            Returns a flag indicating if the second authentication factor has succeeded.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SecondaryAuthStatus.IsEnabled">
            <summary>
            Returns a flag indicating whether two-factor authentication is enabled.
            If this value is false, two-factor authentication is not required.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SecondaryAuthStatus.Name">
            <summary>
            Returns the name of the two-factor authentication provider.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SessionAuthDb.AuthTime">
            <summary>
            Returns the time of the authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SessionAuthDbConfig.SsoAuthentifiers">
            <summary>
            Gets the list of valid authentifiers for SSO authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SessionAuthDbConfig.ManualAuthentifiers">
            <summary>
            Gets the list of valid authentifiers for manual authentication.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SessionAuthDbConfig.ExcludedAuthentifiers">
            <summary>
            List of disallowed specific authentication modules
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Session.SessionAuthDbConfig.AuthProviders">
            <summary>
            Gets the list of additional authentication providers.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Session.SessionAuthModuleInfo">
            <summary>
            Represents an authentication attempt.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Session.SessionAuthOption">
            <summary>
            Default implementation of the <see cref="T:QBM.CompositionApi.Session.ISessionAuthOption"/> interface.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Session.ISessionGroupBuilder.BuildAsync(Microsoft.Owin.IOwinContext,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Builds a new session group.
            </summary>
            <param name="groupId">Sets a group ID to assign. If the value is <c>null</c> or empty, a random ID will be generated.</param>
            <returns></returns>
        </member>
        <member name="T:QBM.CompositionApi.Session.SessionIdGenerator">
            <summary>
            Generator for session IDs.
            </summary>
            <remarks>A session id is a logically 120 bit random number, represented in a string of 20 characters from a
            size 64 character set.The session id can be placed in cookies and URLs without encoding./</remarks>
        </member>
        <member name="T:QBM.CompositionApi.Socket.ISocketAdapter">
            <summary>
            Adapter for a web socket.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.ISocketAdapter.OnMessageReceivedAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Threading.CancellationToken)">
            <summary>
            Called when the server received a message from the client.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.ISocketAdapter.OnReceiveError(System.Exception)">
            <summary>
            Called when an error has occurred.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.ISocketAdapter.OnCloseAsync(System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
            Called when the socket is closed.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.SocketExtensions.HandleSocket``1(``0,System.Func{QBM.CompositionApi.Socket.ISocketRequest,QBM.CompositionApi.Socket.ISocketAdapter})">
            <summary>
            Registers a web socket handler for the specified API method.
            </summary>
            <param name="handler">Generator function for a socket adapter based on the supplied web socket. Called when
            a client makes a request to this method.</param>
            <remarks>Note that the socket is closed by the server when the session is disposed, or when the server
            shuts down.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Socket.SocketExtensions.HandleSocket``1(``0,System.Func{QBM.CompositionApi.Handling.IRequest,System.Threading.Tasks.Task{System.Func{QBM.CompositionApi.Socket.ISocketRequest,QBM.CompositionApi.Socket.ISocketAdapter}}})">
            <inheritdoc cref="M:QBM.CompositionApi.Socket.SocketExtensions.HandleSocket``1(``0,System.Func{QBM.CompositionApi.Socket.ISocketRequest,QBM.CompositionApi.Socket.ISocketAdapter})"/>
        </member>
        <member name="F:QBM.CompositionApi.Socket.WebSocketConnection.MaxMessageSize">
            <summary>
            Maximum message size in bytes for the receive buffer
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.WebSocketConnection.Abort">
            <summary>
            Aborts the websocket connection
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Socket.WebSocketConnection.AcceptSocketAsync(Microsoft.Owin.IOwinContext)">
            <summary>
            Receive one entire message from the web socket
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.StaticContent.BaseZipFilesPreLoader.ExtractToTarget(QBM.CompositionApi.StaticContent.StaticContentInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Override this method, if a special extracting behavior is needed while running <see cref="M:QBM.CompositionApi.StaticContent.BaseZipFilesPreLoader.LoadAndDecompress(QBM.CompositionApi.StaticContent.StaticContentInfo,System.Threading.CancellationToken)"/>
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Statistics.IObjectStatisticsService.GetChartInfosAsync(System.String,System.String,VI.DB.Entities.ISession,System.Threading.CancellationToken)">
            <summary>
            Returns the list of chart definitions available to the authenticated user.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Typed.IBulkPropertyValueContext`1">
            <summary>
            Represents a property value evaluation context.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Typed.IBulkPropertyValueContext`1.Entities">
            <summary>
            Returns the entities to provide values for.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Typed.IPropertyValueContext`1.Entity">
            <summary>
            Gets the entity to provide a value for.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithSingleEntityRead``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Boolean)">
            <inheritdoc cref="M:QBM.CompositionApi.Definition.ExtensionMethods.WithSingleEntityRead``1(``0,System.String,System.Boolean)"/>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithEntityValueParameter``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Adds support for a route parameter that corresponds to a value of an entity.
            </summary>
            <remarks>This will apply filtering of the result set and will
            set the value when creating a new entity.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions._ToBulk``1(QBM.CompositionApi.Handling.IBulkEntityProcessingContext{``0},System.Func{QBM.CompositionApi.Handling.IEntityProcessingContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Applies a single-entity processing handler to a bulk-entity processing context.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithResultColumns``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String[])">
            <summary>
            Configures the specified database columns to be returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithResultColumns``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Configures the specified database columns to be returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">Base method</param>
            <param name="properties">Property expressions</param>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithAdditionalColumns``1(``0,System.String[])">
            <summary>
            Configures the specified database columns to be loaded from the database, but not returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Base method</param>
            <param name="columnNames">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithAdditionalColumns``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Configures the specified database columns to be loaded from the database, but not returned in the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="method">Base method</param>
            <param name="properties">Database column names</param>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithPropertyList``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Applies the property list to an entity method.
            </summary>
            <remarks>The properties will be added as result columns; and all property modifiers will be applied.</remarks>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.OrderBy``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String)">
            <summary>
            Defines a default <c>ORDER BY</c> clause.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.Modify``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Action{QBM.CompositionApi.Definition.PropertyModifier})">
            <summary>
            Register a modifier for a property.
            </summary>
            <param name="method">Base method</param>
            <param name="columnName">Name of the column to modify.</param>
            <param name="modifier">Action that configures the property modifier.</param>
            <returns></returns>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithParameterExtendedData``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.Boolean)">
            <summary>
            Configures the CRUD model to use a <see cref="T:QBM.CompositionApi.ExtendedData.ParameterProvider"/>. This method
            only supports parameter sets that have already been created.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithParameterExtendedData``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String)">
            <summary>
            Configures the CRUD model to use a <see cref="T:QBM.CompositionApi.ExtendedData.ParameterProvider"/>. This method
            supports creation of new parameter sets, where the supplied column name points to
            the owner of the parent parameter set.
            </summary>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithWritableColumns``1(QBM.CompositionApi.Crud.ICrudMethod{``0},System.String,System.Func{VI.DB.Entities.IEntity,System.Boolean})">
            <summary>
            Defines a dynamic condition for a writable column.
            </summary>
            <param name="conditionFunc">Callback which should return <c>true</c> if the column should be writable.</param>
        </member>
        <member name="M:QBM.CompositionApi.Typed.TypedExtensions.WithFkWhereClause``2(QBM.CompositionApi.Crud.ICrudMethod{``0},VI.DB.Entities.TypedRelationData{``0,``1},QBM.CompositionApi.Definition.IFkWhereClauseProvider)">
            <summary>
            Configures a dynamic WHERE clause that limits the objects that can be assigned as a foreign-key value.
            </summary>
            <param name="method">Base method</param>
            <param name="tableName">Name of the foreign-key parent table</param>
            <param name="whereClauseProvider">WHERE clause provider</param>
        </member>
        <member name="T:QBM.CompositionApi.UserConfig.CustomizedViewConfigProvider">
            <summary>
            View configuration provider implementation that combines the pre-defined view configuration
            with the user-specific customization data.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.UserConfig.ViewConfigData.Id">
            <summary>
            Gets or sets the ID of this configuration object.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.UserConfig.ViewConfigData.ViewId">
            <summary>
            Gets or sets the ID of the related view.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.UserConfig.ViewConfigData.AdditionalParameters">
            <summary>
            Storage for arbitrary URL filter parameter values.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Util.DisposableBase">
            <summary>
            Base class that disposes when the server starts shutting down.
            </summary>
        </member>
        <member name="T:QBM.CompositionApi.Util.TimeoutLazy`1">
            <summary>
            Lazy value class that automatically resets after a timeout has expired.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:QBM.CompositionApi.Util.TimeoutLazy`1.#ctor(System.Func{`0},System.TimeSpan,System.Threading.LazyThreadSafetyMode,System.Boolean)">
            <summary>
            Creates a new lazy value with a timeout.
            </summary>
            <param name="valueFactory">The value factory function that is called to retrieve the value.</param>
            <param name="timeout">Validity duration for the value</param>
            <param name="mode">Thread safety mode.</param>
            <param name="disposeOnInvalidate">Dispose the value when resetting.</param>
        </member>
        <member name="P:QBM.CompositionApi.Util.TimeoutLazy`1.Timeout">
            <summary>
            Gets or sets the validity period.
            </summary>
        </member>
        <member name="P:QBM.CompositionApi.Util.TimeoutLazy`1.Value">
            <inheritdoc cref="P:VI.Base.ResetLazy`1.Value"/>
        </member>
        <member name="P:QBM.CompositionApi.Util.TimeoutLazy`1.IsValueCreated">
            <inheritdoc cref="P:VI.Base.ResetLazy`1.IsValueCreated"/>
        </member>
        <member name="M:QBM.CompositionApi.Util.TimeoutLazy`1.Reset">
            <inheritdoc cref="M:VI.Base.ResetLazy`1.Reset"/>
        </member>
        <member name="F:Quest.Globals.QBM_CompanyNameLong">
            <summary>
            Long name of the company
            </summary>
        </member>
        <member name="F:Quest.Globals.QBM_CompanyNameShort">
            <summary>
            Short name of the company
            </summary>
        </member>
        <member name="F:Quest.Globals.QBM_CompanyNameTechnical">
            <summary>
            Company name for registry keys, directories, etc.
            </summary>
        </member>
        <member name="F:Quest.Globals.QBM_Copyright">
            <summary>
            The copyright string.
            </summary>
        </member>
        <member name="F:Quest.Globals.QBM_Copyright_Warning">
            <summary>
            The copy right warning string.
            </summary>
        </member>
        <member name="F:Quest.Globals.QBM_SupportMail">
            <summary>
            The support email address.
            </summary>
        </member>
        <member name="F:Quest.Globals.QHD_ProductNameFull">
            <summary>
            Full name for History Database
            </summary>
        </member>
        <member name="F:Quest.Globals.QHD_ProductNameShort">
            <summary>
            Short name for History Database
            </summary>
        </member>
        <member name="F:Quest.Globals.QHD_TechnicalName">
            <summary>
            Technical name History Database
            </summary>
        </member>
        <member name="F:Quest.Globals.QIM_ProductNameFull">
            <summary>
            Full name for Identity Manager
            </summary>
        </member>
        <member name="F:Quest.Globals.QIM_ProductNameShort">
            <summary>
            Short name for Identity Manager
            </summary>
        </member>
        <member name="F:Quest.Globals.QIM_SuiteName">
            <summary>
            Suite Name
            </summary>
        </member>
        <member name="F:Quest.Globals.QIM_TechnicalName">
            <summary>
            Technical name for Identity Manager
            </summary>
        </member>
        <member name="F:Quest.Globals.QIM_Abbreviation">
            <summary>
            Product abbreviation
            </summary>
        </member>
    </members>
</doc>
